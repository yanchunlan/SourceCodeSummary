流程：
	app
	pluginlib
	module // 编译提供三方的apk


第三方代理的方式：



1.	加载插件APK --- dynamic-load-apk

	1. 提供外部dex的基本信息，目的是加载外部的dex
	
		根据apkPath取获取PakeageInfo信息,

	// 1> 创建访问插件APK的classLoader
			new classLoader()，去把dex加载到当前私有目录 自定义的File文件里面
			
		
			
	// 2> 创建AssetManager
			反射获取AssetManager的addAssetPath方法，并调用，把apkPath添加进去，
			

	// 3> 创建Resource对象
			根据当前context获取当前resource，并获取当前界面的displayMetrics,configuration
			再根据反射的AssetManager去new resource,
	
	2. 生命周期代理
		
		IPlugin 定义了Activity的各种接口
		
		PluginActivity ，代理Activity的实现类 ， 如果不是插件跳转过来，就调用系统的生命周期方法，
		否则调用 插件的生命周期方法
		
		实现resouce， loadApk.resource
		实现assetManager, loadApk.assetManager
		实现classLoader, loadApk.getClassLoader
		
	3.	启动
	
		传入className,在跳转到 PluginActivity代理类，去执行插件classLoader.loadclass(),并且执行class的attach,oncreate方法
		if(plugin== IPlugin ) 
			就执行三方里面的启动方法
	
2.	Hook方式
	VirtualAPK通过替换了系统的Instrumentation，hook了Activity的启动和创建，当创建的是插件的activity的时候，AMS在处理Activity时，
	通过一个token表示具体Activity对象，而这个token正是和启动Activity时创建的对象对应的，而这个Activity被我们替换成了插件中的Activity，所以之后AMS的所有调用都会传给插件中的Activity
	
	360的RePlugin框架选择hook了系统的ClassLoader，在判断出待启动的Activity是插件中的时，会调用插件的ClassLoader构造相应对象
	RePlugin通过重写Activity的startActivity，因此其插件Activity是需要继承一个类似PluginActivity的基类的。不过RePlugin提供了一个Gradle插件将插件中的Activity的基类换成了PluginActivity，用户在开发插件Activity时也是没有感知的

	
	其他URL：https://blog.csdn.net/lyb2518/article/details/79178386
		
		
------------------------------------------------------------------------------------------------------

插件化总结

1.	加载代码
	ActivityThread 中的 loadApk 查看加载apk流程
	1>	dexClassLoader加载代码
	问题：
		1）类冲突问题，插件宿主同名类
		2）使用同样第三方库带来的问题
		3）混淆后类名冲突问题
		4）用不同的classLoader加载，代码复用问题
		5）dex2oat问题

2.	加载资源
	1>	使用同一个resource，通过里面的assetManager.addpath添加资源
	2>	使用不同resource
	3>	通过context pluginContext=context.createPackageContext(xxx,flag), 解决
	问题：
		1）资源冲突问题
			1.	修改aapt，每个插件宿主分配不同资源id package范围
			2.	固定id

3.	启动代码
	1>	所有插件activity,service都继承一个特殊activity,编译时完成	-	腾讯shadlew
	2>	hook + 占坑方式
	3>	一个hook插件化实现 	-	360 instrucationIn
	4>	0hook，0反射		-	编译时更改activity继承关系
		1.	hook instrucation
		2.	hook activityManager,并动态代理
		3.	hook xxxManager ,目的是把里面的包名改为数组自己的【原因是系统发现包名跟当前包名不同就会获取不到服务】
	四大组件处理：
	activity:	launcher mode ？ 简单启动，判断是哪个插件，通过intent里面存储信息处理，
	service:	通过自己制作service自己管理，处理service的启动与生命周期管理，
	contentprovider:	跟service一样的处理

4.	插件化问题
	activity的launcher mode,少有框架实现对的
	插件service生命周期，少有实现对的
	插件加载慢，dex2oat问题，不好避免
	系统碎片化，兼容性问题【另外的应用也hook了mH类，怎么解决这种冲突？】
	插件拆分不好把握
	插件与插件之间，插件与宿主之间依赖问题，必须清晰确定的接口
	插件之间代码复用，资源复用，若过于独立，又会导致包太大，如果复用太多又会导致依赖关系复杂
	插件机制与安全软件hook冲突带来的兼容性问题
	