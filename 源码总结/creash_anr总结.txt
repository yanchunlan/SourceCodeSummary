一.	异常捕获方案
	1.	thread.setDefaultUncaughtExeceptionHandler + breakPad
	breakPad 生成的dump文件需要转换，且较大，维护困难
	2.	xcreash(爱奇艺)
	奔溃生成tombstone，可直接分析，大小较小
	3.	bugly(腾讯)
	以上都具备
	总结：
		优先级：bugly > xcreash > 默认

二.	java异常
	zgoteInit ->
	UncaughtHandler.uncaughtException (此处是添加了监听) ->				
	commonInit ( setDefaultUncaughtExecepttionHandler ) ->
	handlerApplicationCreash ->
		(ams)handlerApplicationCreashInner ->
		addErrorToDropBox（将进程crash信息存储/data/system/dropbox中） ->
		creashApplication ->
		handlerAppCreashingLocked ->
		sendMessage(SHOW_ERROR_MSG) -> 弹出异常对话框

	当运行时异常，虚拟机在thread.cc回调CallVoidMethod（“uncaughtException”）,回调上面java的方法，执行异常后的处理操作

三.	native异常
	大概流程： native 异常，kernel发送signal，target进程捕获signal，然后与debuggerd建立socket通信，执行dump操作
	信号量定义在： signal.h 文件

	具体流程：（android 6.0）
	1.	信号处理函数注册
		init (begin.s) ->
		_linker_init (linker.cpp) ->
			_linker_init_post_relocation
			debuggerd_init 					->
		debugerd_signal_handler(debugger.cpp)
		send_debuggerd_packet

		上面是注册与监听

	2.	debuggerd收集奔溃信息
		接上面大概流程，debuggerd作为服务端会接受到DEBUGGER_ACTION_CRASH消息，然后debuggerd执行下面流程：
		1>	接受target进程发送来的socket请求，fork子进程来处理任务
		2>	子进程创建tombstone文件，并dump收集相关信息，包括设备基本信息，backtrace,stack,系统locat
		3>	socket到system_server进程走crash流程

	3.	ams走应用crash流程
		直接回调到 java 层的 handlerApplicationCrash 方法
			写入crash信息到dropbox,开始死亡回调，杀进程，清理进程四大组件，弹出crash对话框

四.	xcreash（2.5.7）分析
	xcrash.init 内部有3种（java，native,anr）handler处理奔溃和日志收集,fileManager和tombstoneManager对奔溃日志进行tombstone文件管理
	client调用tombstoneParser解析本地生成对应的tombstone文件获取数据
	1>	java 奔溃捕获
		thread.setDefaultUncaughtExeceptionHandler ->
		handlerException ->
			native 通知javacrash
			anr 通知javacrash
			logFile 写入文件到/data/data/packageName/files/tombstone
			执行回调 callback.oncrash

	2>	native 奔溃捕获
		Crash.init ->
		NativeHandler.initialize ->
		nativeInit 动态注册native函数 ->
		xc_jni.xc_jni_init ->
			xc_crash_init / xc_trace_init ->
				
			xc_crash_init -> 
			xc_crash_init_callback
				-> NativeHandler.crashCallBack 
			xcc_signal_crash_register 
				-> xc_crash_signal_handler
				-> xc_crash_exec_dumper
				接下来是各种数据的 dump，搜其main函数，就可知其实现细节

		奔溃处理步骤总结：
			注册信号函数（signal handler）
			奔溃发送创建子进程收集信息（避免在崩溃进程调用函数的系统限制）
			suspend崩溃进程中所有的线程，暂停logcat输出，收集logcat
			收集backtrace等信息
			收集内存数据
			完成后恢复线程

	3>	anr 捕获
		Crash.init ->
		AnrHandler.initialize(Build.VERSION.SDK_INT <21 才拦截,因为此处FileObserver读取监听/data/anr/的权限只支持到<21版本) ->
		FileObserver.handleAnr ->
		checkProcessAnrState (ams的的mLruProcesses中过滤出crash和anr异常的进程，返回对应的错误信息)

		如果Build.VERSION.SDK_INT>21
		NativeHandler.initialize ->
		xc_trace_init ->
		xcc_signal_trace_register(xc_trace_handler) (native 注册 SIGNAL_QUIT 信号) ->
		xc_trace_dumper (xc_trace_dumper线程会解除阻塞状态开始执行dump任务)

五.	anr日志生成与捕获分析
	1.	anr的生成
		实质都是启动过程中先发送了一个msg消息，执行anr弹窗操作，然后在启动结束回调中移除此消息
		先发送超时消息，再发送具体消息
		1>	Service每个函数（前台20s，后台200s）：
			as.realStertServiceLocked ->
				bumpServiceExecutiongLocked ->
					scheduleServiceTimeOutLocked ->
						m.Am.mHnadler.sendMessageAtTime(SERVICE_TIMEOUT_MSG)

			AT.handleCreateService ->
				AMS.serviceDoneExecuting ->
					AS.serviceDoneExecutingLocked ->
						m.Am.mHnalder.removeMessagees(SERVICE_TIMEOUT_MSG)

		2>	BroadcastReceiver.onReceive(前台10s,后台60s)
			BQ.processNextBroadcast ->
				broadcastTimeOutLocked ->
					setbroadcastTimeOutLocked ->
						mHandler.obtainMessage(BROADCAST_TIMEOUT_MSG)

			BQ.processNextBroadcast ->
				cancelBroadcastTimeOutLocked ->
					mHnadler.removeMessagees(BROADCAST_TIMEOUT_MSG)

		3>	ContentProvider(10s)
			AMS.attachApplicationLocked ->
				mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG)

			AMS.attachApplicationLocked ->
				mHandler.removeMessagees(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG)

		4>	input (当前输入事件5s未处理完成)

		上面发生anr的日志生成：
			发送超时消息之后， -> 	
			AppErrors.appNotResponding (收集信息，调用服务，dump写入数据，添加DropBox弹窗ANR,发送handler消息SHOW_NOT_RESPONDING_UI_MSG)
			systemServer
			-> 添加所有进程id
			-> suppend thread 
			-> dump java/native trace
				具体是打开trace文件，设置内容追加模式，
				创建socket超时监听
				创建管道，并与socket超时绑定，若对方超时则结束流程
				向指定进程发送sigquit信号，通知dump文件（sigquit在虚拟机注册与监听）
				监听管道读取管道内容，写入制定trace文件，
	2.	anr的分析
		分析总共可发分为如下4步：
		1>	确定ANR发生时间,关键字:am_anr,ANR in
			通过am_anr 和 ANR in ,确定ANR发生的时间、对应的进程、原因描述,CPU占用和iowait时间有特别异常的也需要关注

		2>	查看trace及系统附加信息关键字:MIUI-BLOCK-MONITOR
			/data/anr/traces.txt

		3>	系统耗时关键字:binder_sample,dvm_lock_sample，am_lifecycle_sample，binder thread
			binder_sample:	监控每个进程的主线程的binder transaction的耗时情况，超阀值输出
			dvm_lock_sample:	线程等待lock的时间，超过阈值输出
			am_lifecycle_sample:	主线程的生命周期回调方法执行时间超过阈值输出
			binder thread:	system_server等进程的线程池使用完，无空闲线程时，此时称饥饿状态, 则饥饿状态超过一定阈值则输出信息

		4>	源码及逻辑分析

		5>	trace日志解析
			----- pid 901 at 2015-11-28 14:38:34 -----
			Cmd line: system_server 				
			【说明了发生ANR的进程id、时间和进程名称】

			JNI: CheckJNI is off; workarounds are off; pins=6; globals=2154 (plus 409 weak)

			DALVIK THREADS:
			(mutexes: tll=0 tsl=0 tscl=0 ghl=0)
			【tll:thread list lock、tsl:thread suspend lock、tscl:thread suspend count lock、ghl:gc heap lock、hwl:heap worker lock、hwll:heap worker list lock】

			"main" prio=5 tid=1 NATIVE 		【线程名称、线程的优先级、线程锁id和线程状态】
			  | group="main" sCount=1 dsCount=0 obj=0x415a4e88 self=0x414c48d8	【线程组名称，线程被挂起的次数，被调试器挂起的次数，Java对象的地址，本身的地址】
			  | sysTid=901 nice=-2 sched=0/0 cgrp=apps handle=1073926484	线程的调度信息【Linux的内核线程id，调度优先级，调度策略和优先级，调度属组，处理函数地址】
			  | state=S schedstat=( 303590361913 618664734427 651535 ) utm=19466 stm=10893 core=0   上下文信息【调度状态，（/proc/[pid]/task/[tid]/schedstat读取；cpu上执行的时间、线程的等待时间和线程执行的时间片长度），线程用户态下使用的时间值，内核态下的调度时间值，cpu核的序号】
			  #00  pc 00021914  /system/lib/libc.so (epoll_wait+12)


			线程的状态如下：
				THREAD_ZOMBIE		0	TERMINATED
				THREAD_RUNNING		1	RUNNABLE or running now
				THREAD_TIMED_WAIT	2	TIMED_WAITING in Object.wait()
				THREAD_MONITOR		3	BLOCKED on a monitor
				THREAD_INITIALIZING	5	allocated not yet running
				THREAD_STARTING		6	started not yet on thread list
				THREAD_NATIVE		7	off in a JNI native method
				THREAD_VMWAIT		8	waiting on a VM resource
				THREAD_SUSPENDED	9	suspended usually by GC or debugger 	用来区分是否是debug包


	3.	anr的日志收集方式
		1>	低版本	FileObserver+ProcessErrorStateInfo
			FileObserver:
				监听/data/anr/目录下对应的trace文件,读取相关trace信息

				如下：
					/**
					fileObserver = new FileObserver("/data/anr/", CLOSE_WRITE) {
						onEvent()
					}
					fileObserver.startWatching();//启动监听
					fileObserver.stopWatching();//停止监听
					*/

					FileObserver.startWatching -> 
					ObserverThread.startWatching ->
					android_os_fileobserver_startWatching ->
					inotify_add_watch

					inotify是文件系统变化通知机制，在监听到文件系统变化后，会向相应的应用程序发送事件

					SELinux(或SEAndroid)将app划分为主要三种类型(根据user不同，也有其他的domain类型)：
						untrusted_app：第三方app，没有android平台签名，没有system权限
						platform_app：有android平台签名，没有system权限
						system_app：有android平台签名和system权限

			ProcessErrorStateInfo:
				从 ProcessErrorStateInfo 中获取report(notRespondingReport初始化的地方在AppErrors.appNotResponding中调用的makeAppNotRespondingLocked)

		2>	高版本	native 注册 SIGNAL_QUIT 信号，ANR发生时接收回调去收集ANR信息

		总结：
			xcrash 与bugly都是采用上述方式
		日志收集：
			java 层获取线程堆栈，反射获取虚拟机内部dump线程堆栈接口，并在内存映射函数地址，强制调用接口，将数据映射到本地

	4>	anr 捕获第三方
		ANRWatchDog：
			创建单独进程，向主线程handler发送+1消息，并定义anr阀值，休眠后判断变量是否+1完成，未完成就警告并抓取anr信息，堆栈信息

	5>	卡顿捕获第三方：
		BlockCanary：
			主线程looper的loop方法在寻找msg.target.dispatchMessage(msg)，前后打印log,时间差，满足阀值就定义是卡顿

		fpsViewer:
			Choreographer.doFrame两个绘制之间（正常<16ms）大于200ms就定义是卡顿

		dokit:
			Choreographer.doFrame两个绘制之间（正常<16ms）大于200ms就定义是卡顿

		微信Matrix的TraceCanary：
			Choreographer.doFrame两个绘制之间（正常<16ms）大于200ms就定义是卡顿，从buffer（字节码方法前后插装方法id与序列，执行方法中存储这些信息到buffer）取出方法的堆栈序列，上传后台，后台根据执行顺序id，给出堆栈信息


