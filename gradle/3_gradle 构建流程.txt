一.	gradle 命令执行流程
	具体流程在如下：
		图 3- agp构建流程

	其中最重要的是五大生命周期的流程如下：

	1.loadSetting
		getLoadedSettings ->
		doBuildStages ->
		doClassicBuildStages (重点，此方法有分发)->
			Stage == LoadSettings  ->  prepareSettings
			Stage == Configure -> prepareProjects
			Stage == TaskGraph -> prepareTaskExecution
			Stage == RunTasks -> saveTaskGraph,tasks.runAction
		其中，prepareSettings -> 
			BuildListener.buildStarted
			DefaultSettingsPreparer.prepareSettings ->
				 init.gradle
				 DefaultSettingsLoader.findAndLoadSettings（即查找setting.gradle） ->
				 	查找 settings.gradle 
				 	编译 buildSrc
				 	解析 gradle.properites 
				 	解析 settings.gradle 文件
				 	创建 project 以及 subproject 实例
	2.	configure
		prepareProjects ->
		DefaultProjectsPreparer.prepareProjects ->
		TaskPathProjectEvaluator.configureHierarchy ->
		EvaluateProject.run ->
			ProjectEvaluationListener.beforeEvaluate
			evaluate.init、wrapper task 和 默认插件，然后便会编译并执行 build.gradle 脚本
			ProjectEvaluationListener.afterEvaluate
	3.	taskGraph
		DefaultGradleLauncher.prepareTaskExecution -> 
		BuildOperatingFiringTaskExecutionPreparer.prepareForTaskExecution ->
		CalculateTaskGraph.run ->
		populateTaskGraph ->
		DefaultTaskExecutionPreparer.prepareForTaskExecution  ->
		buildConfigurationActionExecuter.select ->
			ExcludedTaskFilteringBuildConfigurationAction.configure(处理需要排除的task)
			DefaultTasksBuildExecutionAction.configure(添加默认的task)
			TaskNameResolvingBuildConfigurationAction.configure（计算 task 依赖图）
		返回，执行 taskGraph.populate
	4.	runTask
		DefaultGradleLauncher.executeTasks ->
		doBuildStages.doClassicBuildStages ->
		runWork ->
		DefaultBuildWorkExecutor.execute ->
			BuildExecutionAction.DryRunBuildExecutionAction
			SelectedTaskExecutionAction.BindAllReferencesOfProjectsToExecuteListener ->
				DefaultTaskExecutionGraph.execute ->
				DefaultTaskExecutionGraph.executeWithServices ->
				DefaultPlanExecutor.process ->
				startAdditionalWorkers
			DefaultBuildOperationExecutor.run ->
				TaskExecutionListener.beforeExecute
					1) 、CatchExceptionTaskExecuter#execute：增加 try catch，避免执行过程中发生异常。
					2）、ExecuteAtMostOnceTaskExecuter#execute：判断 task 是否执行过。
					3）、SkipOnlyIfTaskExecuter#execute：判断 task 的 onlyif 条件是否满足执行。
					4）、SkipTaskWithNoActionsExecuter#execute：跳过没有 action 的 task，如果没有 action 说明 task 不需要执行。
					5）、ResolveTaskArtifactStateTaskExecuter#execute：设置 artifact 的状态。
					6）、SkipEmptySourceFilesTaskExecuter#execut：跳过设置了 source file 且 source file 为空的 task，如果 source file 为空则说明 task 没有需要处理的资源。
					7）、ValidatingTaskExecuter#execute：确认 task 是否可以执行。
					8）、ResolveTaskOutputCachingStateExecuter#execute：处理 task 输出缓存。
					9）、SkipUpToDateTaskExecuter#execute：跳过 update-to-date 的 task。
					10）、ExecuteActionsTaskExecuter#execute：用来真正执行 Task 的 executer
			ExecuteActionsTaskExecuter.execute ->
				ExecuteActionsTaskExecuter.TaskExecution.execute ->
					TaskActionListener.beforeActions
					内部会遍历执行 Task 所有的 Action
					TaskActionListener.afterActions
	5.	finished
		 buildListener.buildFinished
		 
二.	appPlugin构建流程
	app module 依赖 implementation 'com.android.tools.build:gradle:3.0.1' 即可查看agp源码
	其主要分为以下几个流程
	1.	准备工作
		basePlugin.apply -> 
		checkPluginVersion （检查插件版本）
		checkModulesForErrors （检查 module 是否重名）
		PluginInitializer.initialize/ProfilerInitializer.init/ProcessProfileWriter.getProject (初始化插件信息)
	2.	配置项目
		BasePlugin.configureProject ->
		checkGradleVersion (检查 gradle 版本)
		创建 AndroidBuilder和 DataBindingBuilder
		apply(JavaBasePlugin.class)/ apply(JacocoPlugin.class); (引入 java plugin 和 jacoco plugin)
		添加了 BuildListener，在 buildFinished 回调里做缓存清理工作
	3.	配置 Extension
		BasePlugin.configureExtension ->
		createExtension (创建 AppExtension，也就是 build.gradle 里用到的 android {} dsl)
		创建依赖管理，ndk管理，任务管理，variant管理
		注册新增配置的回调函数，包括 signingConfig，buildType，productFlavor
		创建默认的 debug 签名，创建 debug 和 release 两个 buildType
	4.	创建不依赖 flavor 的 task
		BasePlugin.createTasks ->
		TaskManager.createTasksBeforeEvaluate
		创建Task如下：
			uninstallAll，deviceCheck，connectedCheck，preBuild，
			extractProguardFiles，sourceSets，assembleAndroidTest，
			compileLint，lint，lintChecks，cleanBuildCacheresolveConfigAttr，consumeConfigAttr
	5.	创建构建 task
		BasePlugin.createAndroidTasks ->
		VariantManager.createAndroidTasks -> 

		在其执行之前，通过 populateVariantDataList 生成 flavor 数据，然后通过 createTasksForVariantData创建 flavor 对应的 task

		1.	populateVariantDataList

			通过createVariantDataForProductFlavors 创建VariantData ，其中VariantData 都是 BaseVariantData 的子类，
			看BaseVariantData 如下：
			public abstract class BaseVariantData implements TaskContainer {
			    private final GradleVariantConfiguration variantConfiguration;
			    private VariantDependencies variantDependency;
			    private final VariantScope scope;
			    public Task preBuildTask;
			    public Task sourceGenTask;
			    public Task resourceGenTask; // 资源处理
			    public Task assetGenTask;
			    public CheckManifest checkManifestTask; // 检测manifest
			    public AndroidTask<PackageSplitRes> packageSplitResourcesTask; // 打包资源
			    public AndroidTask<PackageSplitAbi> packageSplitAbiTask;
			    public RenderscriptCompile renderscriptCompileTask; 
			    public MergeResources mergeResourcesTask; // 合并资源
			    public ManifestProcessorTask processManifest; // 处理 manifest
			    public MergeSourceSetFolders mergeAssetsTask; // 合并 assets
			    public GenerateBuildConfig generateBuildConfigTask; // 生成 BuildConfig
			    public GenerateResValues generateResValuesTask;
			    public Sync processJavaResourcesTask;
			    public NdkCompile ndkCompileTask; // ndk 编译
			    public JavaCompile javacTask; 
			    public Task compileTask;
			    public Task javaCompilerTask; // java 文件编译
			    // ...
			}
		2.	createTasksForVariantData
			创建完 variant 数据，就要给 每个 variantData 创建对应的 task，对应的 task 有 assembleXXXTask，prebuildXXX，
			generateXXXSource，generateXXXResources，generateXXXAssets，processXXXManifest 等等

			具体可查看createTasksForVariantScope，其中 ApplicationTaskManager.createTasksForVariantScope()是具体实现类
			
		注意：	
			TransformManager.addTransform 实际上是为 transform 创建了一个 Task