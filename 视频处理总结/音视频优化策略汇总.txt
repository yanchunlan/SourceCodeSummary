一.	方向总览
	核心算法：编解码算法，图像算法，传输算法
	难点突破：AI人工智能参与，HDR，高清分辨力，
	协同：cpu,Gpu，huawei 处理器的充分利用协作

二.	直播多码率协议优化


三.	播放优化
	1. 建立监控
		dns_analyze			stream_info			v_dec_opened/v_pkt_pre_dec/v_pkt_dec  		v_render
		connect			->	a_pkt_recv		-> 											->	
		first_data			v_pkt_recv			a_dec_opened/a_pkt_pre_dec/a_pkt_dec 		a_render

	2.	播放器优化
		1>	首帧优化
			http dns：为了支持dns，需要修改ffmpeg源码
			a/v interleave
			m3u8和ts相同域名
			tcp连接复用
			启播seek	：请求一次之后，直接seek到精确点
			web端hls支持流式处理
			dns-prefetch
			加载缓冲产品设计
			ts overhead reduce
			kwai manifest
		2>	预加载优化
			时机：不影响原由下载任务，在原有下载完成之后再去下载
			预加载预加载队列，滑动不更新，滑动停止实时更新
			预加载只加载前面2/3秒的分片，不加载太多数据
			是否预加载：当前播放缓存到600k,播放缓存低于60%暂停预加载，卡顿3次暂停，网络超弱暂停
		3>	网络优化
			弱网判断
				两次发包的时间间隔，通过发包的状态与时间的长度判断
			上行带宽的状况来动态调整码率、FPS、分辨率
			编码优化
				ACC-LC Codec编码音频，VBR编码视频
			传输协议优化
				尽量使用 RTMP
				尽量在靠近推流端的收流节点进行转码
		4>	清晰度优化
			1. 	视频档位调整
				原始视频
				原始视频+增强版本			采用此
				其他档位
				hevc高档位
			2. 增强
				Deart:
				SR:深度学习提高视频分辨率，修复原始视频降采样带来的失真
			3.	参数调整
				h264 高档 3.8m 720p（短边对齐）
					 低挡 850k 480p
				h265 高档 2.8m 720p
					 低挡 750k 576p
			4. reco 过滤清晰度差的视频
			5. 客户端多码率优化
				根据场景切换码率，列入无网络高档位播放
		5>	流畅度优化
			上下滑场景：松开手指，如果可滑动下一屏，提前起播，不等待停止
			播放器预加载/holdor预加载：每次都预加载下一个并缓存
			海外版：接入网络库Aegon quic ，提高网络传输能力
			图片优化：上传之前压缩，并处理cdn里面的图片全部压缩
			生产体验优化：从逻辑上减少编码，增加上报拍摄分辨率/秒到率/原画上传占比/编辑导出率

四.	发布优化
	1. 流程优化
		转码+上传（串行改为并行）
	2.	转码优化
		1>	动态转码决策：动态每次转码选择最好的参数
			文件大小：cape ,根据不同的内容预计其码率和文件大小
			转码速度：benchmark,不同的机型预计编码类型和转码速度
			网络带宽决定：rickon测速
		2>	内容感知视频处理和编码
			解码采集一帧，输入到算法仓库，建立模型，计算出来合适的码率
			算法仓库：
				清晰度的定义：psnr/ssim/ms-ssim/vmaf
		3>	转码benchmark

五.	发布到后台的转码优化
	全流程：拍摄（拍摄sdk,墨表sdk） -> 编辑（编辑sdk，特效） -> 编码和封装（编解码算法） -> 上传（网络传输）-> 存储（blobstore）
			- >	转码（转码服务，编解码算法，增强算法） -> 审核 -> 存储（blobStore，cdn）-> 下发（后端，推荐） -> 播放
	


六. 架构优化
	模块支持组建华，插件化

	



