一.线下监控
	1.	设置-耗电排行
		缺点：只能知道app大概耗电，不够具体
	2.	电量广播监控 - ACTION_BATTERY_CHANGED
		缺点：只能获取到一个总耗电量，不够详细
	3.	Battery Historian（>=5.0手机）
		1.	配置环境
			https://github.com/google/battery-historian
			安装Docker
			执行命令docker -- run -p <port>:9999 gcr.io/android-battery-historian/stable:3.0 --port 9999
		2.	导出电量
			重置电量信息：adb shell dumpsys batterystats --reset
			开始记录电量：adb shell dumpsys batterystats --enable full-wake-history
			导出电量信息：adb bugreport bugreport.zip
		3.	上传分析
			http://localhost:9999，上传文件分析
			分析top app耗电量，Userspace Wakelocks可以观测WakeLock的情况
二.	线上监控
	1.	获取运行时耗电
		Android系统中每个组件，如CPU、GPS、显示屏、WIFI、蓝牙，他们运行时的能耗都在power_profile.xml里面
		1>	adb pull /system/framework/framework-res.apk
		2>	反编译，xml中获取power_profile.xml文件
	2.	获取使用时长
		aop的方式统计wakelock/wifi/gps的开始/结束时间，堆栈等
	3.	获取线程使用时长
		aop的方式，在java.lang.Runnable的run方法后面植入统计耗时代码，统计线程执行时间是否过长
三.	电量优化分析
	1.	cpu
		通过traceView/cpu profiler获取cpu信息去分析cpu情况，避免后台的主动运行
	2.	网络
		减少网络请求次数或者延迟空闲执行
		数据压缩，减少传输时间
		禁止轮训功能
	3.	定位
		高精度定位少用
		网络定位替代gps定位
		gps定位使用后合理关闭，或减少使用频率【可以在监控中，控制在后台情况下超过阀值关闭定位】
	4.	界面
		离开界面停止耗电活动【切换到后台，关闭动画】
		耗电操作判断前后台，后台不执行
	5.	WakeLock
		acquire与release成对出现，及时释放
		使用带参数的acquire，设置超时关闭
		finally确保一定释放
		常亮使用KeepScreenOn，不使用WakeLock
	6.	JobScheduler
		后台/不紧急的任务使用JobScheduler执行
		控制在连接电源/wifi的情况下才执行
		如下：
			scheduler.builder.setRequiresCharging(true) //任务执行时需要连接电源
               				.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED); //WIFI状态下


------------------------------------------------------
一.	捕获
	Battery Historian 

二.	影响元素
	屏幕, GPS,CPU,Radio,Video/Audio,Wifi 或蓝牙

三.	监控
	监控进程： hook Location 时间, Alarm 次数,Net 访问量,wake_lock 持有时间,CPU
	收集数据到主进程，根据阀值
	aop:	ASM,javasisit,AspectJ
	nativeHook:		weishu 的 arthoook

	matrix里面的耗电监控

四.	处理建议
	省电这一块 主要是需要控制 wakelock 的使用。控制无谓的 CPU 运行和计算,项目有一些上传下载操作进行着,可采用高效下载策略,做到批量网络请求。可以交给JobScheduler 来处理,JobScheduler集中处理收到的任务,选择合适的时间合适的网络,再一起执行

	频繁定位类的 App 确实是耗电大户，可以在非必须的情况下，采用缓存数据，或者通过简化业务流程的情况下来进行优化

	避免在后台进行日志上报以及前台进行拉活工作

	如果面有一些任务的队列里面积累了大量的任务,每次都循环的执行任务太久,耗电会明显,然后如果项目存在大量轮询接口的时候,应该将其整合起来,减少CPU消耗对于网络请求或者 websocket 通信要对数据进行 gzip 压缩处理

	数据解析不要使用原生的 JSONObject ,应该使用 Gson jackson ptoBuffer 或者其他数据解析工具

	项目的直播或音频是电量消耗大户,可判断用户是否处于充电状态,在获取用户电量,在某个临界点时,降低直播码率,提高观看直播时间

	清单文件application标签下 keepScreeanOn 保持常量模式不够完善,导致用户长时间误操作情况下,屏幕长时间保持常亮。建议修改模式为: 用户5分钟未操作状态下,屏幕变暗且屏幕不关闭。满足屏幕处于开启状态下省电
	
	项目存在大量图片展示,图片加载时会消耗大量的流量与电量。可判断用户是否处于充电状态,在获取用户电量,在某个临界点,降低加载图片码率,提高操作时间


	

	
	