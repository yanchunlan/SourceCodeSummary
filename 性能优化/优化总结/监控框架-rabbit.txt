1.	应用测速
	可以准确统计应用Applicaiton创建耗时、应用冷启动耗时和页面inflate耗时&完全渲染耗时
	
		Application.onCreate耗时统计：	Application.attachBaseContext()开始和Application.onCreate()结束，插桩加入耗时统计函数
		应用冷启动耗时统计：		Application.attachBaseContext开始，到activity的ViewGroup.dispatchDraw耗时完成时间，为冷启动耗时
		Activity页面渲染耗时统计：		针对ContentView套一个控件，监听ViewGroup.dispatchDraw结尾统计渲染结束，并插桩统计代码在Activity.onCreate前，嵌套控件在后
		Activity首次inflate耗时统计：		直接在setContentView(xxx)，前后埋点耗时代码
		Activity首次渲染耗时：		界面全部接口拿到数据并渲染完成（通过拦截器统计接口所有是否完成，添加一个自定义容器，捕获ViewGroup.dispatchDraw的结尾时间，作为渲染耗时）
		页面网络请求耗时监控:		在拦截器中处理，直接chain.proceed(request)，前后分别插入耗时统计，后面上传耗时代码即可

	注：	所有的配置通过一个文件配置，在编译的时候直接读取文件信息，去判断哪些统计
2.	FPS分析
	可以实时显示FPS并支持分页面分析FPS
		Choreographer分析:	https://github.com/yanchunlan/SourceCodeSummary/性能优化/优化总结/监控框架-rabbit-fps监控分析-Choreographer.txt
	1.	Choreographer.doFrame执行时间
		Choreographer.postFrameCallback ；发送postFrameCallback，发送Vsync信号，回调frame方法，计算执行时间，再发送postFrameCallback
	2.	定义卡顿
		在doFrame方法中检测的时间>阈值（10*16.67）就代表卡顿
	3.	捕获卡顿堆栈
		周期性的在线程获取主线程的堆栈信息
3.	代码扫描
	编译时扫描出一些敏感函数(比如耗时函数)

4.	慢函数检测
	编译时插桩，准确的统计每一个函数的耗时，并显示运行时调用堆栈。
	
		字节码插桩解决

5.	网络请求监控
	监控App网络请求,可以很方便的查看返回的json数据
	
		字节码插桩，添加okhttp的拦截器，打印json信息

6.	内存分析
	实时显示应用的内存并支持分页面分析内存状态

7.	应用crash捕获
	支持捕获java层异常
	
		字节码插桩application中加入creashHandler监控

8.	apk分析与优化
	可以准确的分析出apk中的大图、重复文件、apk包大小与内容组成

9.	自定义UI
	可以方便的接入应用的“后门”

10.	数据上报
	支持上报所有监控数据, 也支持自定义数据上报逻辑

11.	极高的可配置性
	提供了众多配置项,可以灵活的检测应用的性能问题