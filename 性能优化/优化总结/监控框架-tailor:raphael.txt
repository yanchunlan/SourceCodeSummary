一.	tailor
	tailor: 获取内存快照工具，并进行裁剪压缩操作
		对内存hprof文件的裁剪库，根据hprof文件格式，去除了一些无用的格式，仅保留byte[]、char[] 和 hprof 格式裁剪
		xHook native hook dump的时候必定会执行open/write函数，对此hook实现dump之后的裁剪操作，并实现zlib压缩，
		其中一个环节裁剪流程：
			nOpen（）：开启对native 层open/write_proxy的hook代理
			Debug.dumpHprofData()：调用open，hook代理里面找到目标文件fd，write的时候找到目标fd写入数据并裁减压缩
			nClose（）：清除hook代理

	matrix:
		Debug.dumpHprofData直接dump完整hprof文件，分析hprof文件格式，裁剪掉数据相同的 Bitmap 对象和 String 对象
		问题点： 
			hprof文件较大，无法存储
			裁剪中的大文件 I/O 和 hprof 分析，对app性能有影响
			裁剪不彻底，存在大量无用数据和可能存在的隐私问题

	拓展（hprof格式）：
		由 Header和 Record 组成 
		1.	Header
			"JAVA PROFILE 1.0.2" + indetifiers + timestamp (13byte + 4byte + 8byte)
		2.	Record 
			tag + time + length + body（1byte + 4byte + 4byte + byte[$length]）
		android dump出来的hprof文件也遵循 hprof 格式，不同之处在于其一级TAG只有：
			STRING、LOAD_CLASS、HPROF_TAG_STACK_TRACE、HEAP_DUMP_SEGMENT、HEAP_DUMP_END。
		HEAP_DUMP_SEGMENT又分很多二级tag，既有标准 hprof 定义，也有Android 自定义的 TAG，跟裁剪关系比较
		紧密的二级 TAG 是 PRIMITIVE_ARRAY_DUMP，存放的是诸如 byte[] 、char[] 、int[]等类型的数据

		裁剪 byte[]和 char[]就可以实现对 Bitmap/String 对象的裁剪，无用数据有timestamp、class-serial-number、
		stack-serial-number、reserved 数据等等，4byte 的 length/number也可以压缩3byte/2byte

二.	raphael（https://mp.weixin.qq.com/s/RF3m9_v5bYTYbwY-d1RloQ）
	基本原理：
		1. 代理内存分配/释放相关的函数（如：malloc/calloc/realloc/memalign/free）
		2. 通过 unwind 回溯调用堆栈
		3. 借助缓存管理过滤出未释放的内存分配记录
	raphael不仅仅监控malloc/calloc/realloc/memalign/free，还覆盖mmap/mmap64/munmap

	1. 代理选择
		xhook（pltHook） 修改got表中的数据					so多就耗时明显，仅hook加载的so，增量so无法监控
		inline hook 	目标函数的头部直接插入跳转指令		兼容性问题，需要挂起相关线程进行指令修正
	
	前期使用xhook，后期引入inline hook
	选择自研bytehook（PLT hook），主要是可以处理增量so

	2. 栈回朔
		32位：libunwind_llvm，libunwind (nongnu)，libudf
		64位：libunwind_fp
	前期使用libunwind_llvm，后面libunwind_llvm & libunwind (nongnu)【回朔深度低于2层使用】，最新使用libudf
	优化：
		限制栈回溯频次
			设定内存阈值，大于阀值才开始执行
		减少无用栈回溯
			减少代理入口到回溯开启函数之间的调用层级，代理入口处提前构建回溯的 context 数据

	3. 缓存管理
		预先分配固定大小的缓存空间，缓存单元耗完就认为存在内存泄漏


