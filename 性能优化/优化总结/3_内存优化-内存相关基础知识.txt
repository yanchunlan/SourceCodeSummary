一.	内存分析命令
	USS: 物理内存		进程独占的内存
	PSS: 物理内存		PSS= USS+ 按比例包含共享库
	RSS: 物理内存		RSS= USS+ 包含共享库
	VSS: 虚拟内存		VSS= RSS+ 未分配实际物理内存

	dumpsys meminfo
		其中dumpsys源码位置在：/frameworks/native/cmds/dumpsys/dumpsys.cpp
		dumpsys传进来的参数通过函数，checkService来找到具体的service,并执行该service的dump方法
		dumpsys meminfo对应的服务是AMS,memBinder类的dump,

		是一系列数据的汇总，包括：mallinfo,getRuntime,proc/pid/smaps,/d/kgsl/proc/pid/mem
		上下分别是:pid的内存信息，app Summary, Objects，fd，thread
		
	Debug.getMemoryInfo: 数据等效于/proc/$<pid>/smaps
		数据组成：mallInfo,getRuntime,proc/pid/smaps,/d/kgsl/proc/pid/mem

	总结：
	1. RSS , VSS 对于监控有一定用途
	2. 几个文件用途：
		/proc/self/status  
			VmSize     -> vss
			VmRSS		-> rss
			Threads
		/proc/meminfo
			MemTotal
			MemFree
			MemAvailable
			CmaTotal
			ION_heap
		内存可利用率：ratio = MemAvailable/MemTotal
		javaHeap
			max = Runtime.getRuntime().maxMemory()
    		total = Runtime.getRuntime().totalMemory()
    		free = Runtime.getRuntime().freeMemory()
    		used = total - free
    		rate = 1.0f * used / max
		
	总结：
		getRuntime可以获取运行时内存
		Debug.getMemoryInfo/dump meminfo是获取的几个文件指标的内存数据（mallInfo,getRuntime,proc/pid/smaps,/d/kgsl/proc/pid/mem）

二.	内存获取方式
	1.	ams
		mi=ams.getMemoryInfo
		mi.totalMem // 系统总内存
		mi.availMem // 可使用内存
		
		源码流程：ams -> getMemoryInfo -> Process.getFreeMemory/getTotalMemory -> open（“/proc/meminfo”）
		总结：
			mi.totalMem = MemTotal 【/proc/meminfo】
			mi.availMem = Cached+MemFree 【/proc/meminfo】
	2.	runtime
		rt=Runtime.getRuntime
		rt.maxMemory
		rt.totalMemory
		rt.freeMemory

		源码流程：Runtime -> xxxMemory -> gc::heap.GetHeap.getxxxMemory -> heap.GetBytesAllocated -> num_bytes_allocated_.LoadSequentiallyConsistent // 像系统申请的内存大小
		总结：
			rt.maxMemory // 获取虚拟机最大分配内存
			rt.totalMemory // 获取虚拟机当前申请到的内存
			rt.freeMemory // 获取虚拟机当前申请内存的剩余内存大小
			剩余可分配内存空间：maxMemory-（totalMemory-freeMemory）
	3.	debug
		mi=Debug.getMemoryInfo
		mi.getTotalPss
		mi.getMemoryStat("summary.java-heap")
		mi.dalvikPss
		mi.nativePss
		Debug.getNativeHeapSize
		Debug.getNativeHeapFreeSize

		源码流程：android_os_Debug.load_maps -> read_mapinfo -> 打开/proc/PID/smaps，读取每一块内存信息累加得到
				getNativeHeapSize/getNativeHeapAllocatedSize/getNativeHeapFreeSize -> mallinfo.usmblks[分配的最大总空间]/uordblks[当前分配的总空间]/fordblks[总空闲空间]
		总结：
			debug主要获取3块内容：
				1. mallinfo获取（类似Debug.getNativeHeapSize）
				2. /proc/PID/smaps （类似mi.getTotalPss）
				3. 数据整合（类似mi.getMemoryStat("summary.java-heap")）
				
三.	内存知识
	1.	内存管理框架
		1>	物理地址与虚拟地址
			虚拟地址与物理地址之间通过页表建立映射关系，CPU通过MMU访问页表查询虚拟地址对应的物理地址
			虚拟地址分为内核空间和用户空间，他们对应的虚拟地址分别为进城共享和进程隔离的
		2>	内核空间内存管理
			page作为内存管理基本单位，特性不同的page命名为zone，zone又根据node管理

			32位有：
				ZONE_DMA 		直接内存访问，无需映射
				ZONE_NORMAL 	一一对应映射页
				ZONE_HIGHMEM	动态映射页
			zone中的内存算法是buddy计算，高频使用Slab

			ION是内存管理器，用来支持不同内存分配机制，如物理连续内存(kmalloc)，虚拟地址连续但物理不连续内存(vmalloc)
		3>	用户空间内存管理
			分为2部分，native划分：
				Data 用于保存全局变量
				Bss 用于保存全局未初始化变量
				Code 程序代码段
				Stack 线程函数执行的内存
				Heap malloc分配管理的内存
			java划分：
				线程共享：java 堆，方法区
				线程私有：虚拟机栈，程序计数器，本地方法栈

	2.	linux内存分配与回收
		内存分配：
			alloc_page/alloc_pages调用开始，进行内存分配，首先进行快速内存分配，失败就使用慢速内存分配
			快速内存分配
			慢速内存分配
		内存回收：
			zone为单位进行回收，而系统判断是否回收zone是根据watermark判断
			
			high：zone空闲页数量高于这个值，不回收
			low：快速分配的默认阀值，zone的空闲页低于此值，执行回收
			min：快速分配失败后的慢速分配阀值，如果慢速分配使用它还是无法进行分配，则进行内存回收

			系统压力太大就会对zone进程内存回收，主要回收三样： slab、lru链表中的页、buffer_head

			lru链表中的页：主要有文件页、匿名页、shmem页
				文件页（file）：有文件背景页面，直接和硬盘对应的文件进行交换
				匿名页(anon)：无文件背景页面，进程堆、栈、数据段使用的页，无法磁盘交换，但可以跟swap区进行交换
				mmap页(shmem)：有文件属性，可以操作文件一样操作，但无文件背景，因此有匿名页属性，内核在内存不足时不能简单将page从page cache中丢弃，需要swap-out
			Lru链表回收算法：
				存在5个双向链表：LRU_INACTIVE_ANON，LRU_ACTIVE_ANON，LRU_INACTIVE_FILE，LRU_ACTIVE_FILE，LRU_UNEVICTABLE

				老化过程：新页放入lru链表 -> 活动lru链表的页移动到非活动lru链表 -> 非活动lru链表移动到非活动lru链表尾部 -> 回收页将页从lru链表中移除

				页回收方式：
					页回写：
						文件存储数据与磁盘数据不一致则为脏页，需将文件页写回到磁盘中对应数据所在位置，然后将此页作为空闲页边框释放到伙伴系统中
					页交换：
						不经常使用的匿名页，将他们写入swap分区中，然后作为空闲页框释放到伙伴系统中
					页丢弃：
						文件页保存内容与磁盘文件对应内容一致，说明文件页是一个干净的文件页，不需要回写，直接将此页作为空闲页框释放到伙伴系统中
				内存不足时，优先换无脏数据的page cache，直接丢弃，其次匿名页和脏数据文件页的回收，遵循url老化原则

				内存回收手段：
					根据回收目标区分有2种，zone/memcg，其中zone的内存回收方式主要是下面3种
					快速内存回收：
						遍历zonelist，如果空闲内存数量 < 阀值 + 保留页框数量（页框数量不达标），则进行快速内存回收，但是慢速内存回收也会存在此问题
					直接内存回收：
						慢速分配中，无法从所有的zone中以min阀值分配边框，就会直接内存回收，注意针对的是zonelist中的所有zone的
					kswapd内存回收：
						在kswapd内核线程中，每个node都有一个swapd内核线程，所以说针对kswapd线程的，只针对回收空闲内存数量 < 阀值 + 保留页框数量（页框数量不达标）
				oom流程：
					malloc -> alloc_page进行内存分配 -> __alloc_pages_nodemask -> 
					1. 使用low阀值快速内存分配，判断有无zone满足分配连续页框，如果没有则失败继续下面
					2. 进入slowpath慢速分配流程，唤醒所有node的kswapd内核线程，先min阀值快速内存分配，失败则kswapd回收，
					3. 再失败则压缩规整系统可移动页，再次失败，则对zonelist所有zone直接内存回收
					4. 再失败则oom

	3.	虚拟机内存分配与回收
		Image Space：连续地址空间，不进行垃圾回收，存放系统预加载类，一般开机启动就把系统类映射到Image Space
		Zygote Space：连续地址空间，匿名共享内存，进行垃圾回收，管理Zygote进程在启动过程预加载和创建的各种对象、资源
		Allocation Space：与Zygote Space一致，在Zygote进程fork第一个子进程之前，会把Zygote Space一分为二，已经使用的叫Zygote Space，未使用的叫Allocation Space，且后续对象分配在Allocation Space上分配
		Large Object Space：离散地址空间，进行垃圾回收，用来分配一些大于12K的大对象
			Image Space和Zygote Space在Zygote进程和应用程序进程之间进行共享，前者创建一次，后者需要在系统每次启动创建一遍
			满足下面3条件，在large object heap分配：
			1. 请求分配的内存大于等于Heap类变量large_object_threshold_指定的值，3个页面大小
			2. 已经从Zygote Space划分Allocation Space，则Heap类的成员变量have_zygote_space_的值等于true
			3. 被分配的对象是一个原子类型数组,既byte数组、int数组和boolean数组等

		Art运行时为新创建对象分配内存过程：
			1. 轻量级gc,尝试分配，轻量级gc,尝试分配，
			2. 允许堆进行增长的情况下进行对象的分配
			3. 进行一次允许回收软引用的GC的情况下进行对象的分配
		涉及的几种引用类型：
		强引用StrongReference/软引用SoftReference/WeakReference/虚引用PhantomReference

		Art GC
		与gc有关的参数
		dalvik.vm.heapgrowthlimit 256m：  App可使用的Heap的最大值
		dalvik.vm.heapsize  512m ：manifest的largeHeap属性，App可使用的Heap的最大值
		dalvik.vm.heapmaxfree 8m ：系统分配给它的Heap初始大小，随着app使用增加
		dalvik.vm.heapmaxfree 8m ：GC后，堆最大空闲值
		dalvik.vm.heapminfree 512k：GC后，堆最小空闲值
		dalvik.vm.heaptargetutilization 0.75：GC后，堆目标利用率

		虚拟机主流gc算法
			引用计数
			可达性分析法
				标记-清除（Mark-Sweep）：高效。内存粹片
				复制（Coping）：高效。需额外空间
				标记-整理（Mark-Compact）：无粹片，无额外空间。耗时，效率低

		Art的3种gc策略
			Sticky GC：回收上一次GC到本次GC之间申请的内存
			Partial GC：局部垃圾回收，回收Image Space和Zygote Space之外的垃圾
			Full GC：全局垃圾回收，除了Image Space之外的Space之外的垃圾

			效果对比：【gc pause长就影响大】
			GC 暂停时间：Sticky GC < Partial GC < Full GC
			回收垃圾的效率：Sticky GC > Partial GC > Full GC

			前后台gc:
				Mark-Sweep GC适合作为Foreground GC，Compacting GC适合作为Background GC

			art 运行时gc过程：
			非并行GC
				1） 调用子类实现的成员函数InitializePhase执行GC初始化阶段。
				2） 挂起所有的ART运行时线程。
				3） 调用子类实现的成员函数Markingphase执行GC标记阶段。
				4） 调用子类实现的成员函数ReclaimPhase执行GC回收阶段。
				5） 恢复第2步挂起的ART运行时线程。
				6） 调用子类实现的成员函数FinishPhase执行GC结束阶段。
			除了当前执行GC的线程之外，其它的ART运行时线程都会被挂起，整个标记过程会稍长。
			并行GC：
				1） 调用子类实现的成员函数InitializePhase执行GC初始化阶段。
				2） 获取用于访问Java堆的锁。
				3） 调用子类实现的成员函数Markingphase执行GC并行标记阶段。
				4） 释放用于访问Java堆的锁。
				5） 挂起所有的ART运行时线程。
				6） 调用子类实现的成员函数HandleDirtyObjectsPhase处理在GC并行标记阶段被修改的对象。
				7） 恢复第4步挂起的ART运行时线程。
				8） 重复第5到第7步，直到所有在GC并行阶段被修改的对象都处理完成。
				9） 获取用于访问Java堆的锁。
				10） 调用子类实现的成员函数ReclaimPhase执行GC回收阶段。
				11） 释放用于访问Java堆的锁。
				12） 调用子类实现的成员函数FinishPhase执行GC结束阶段。

			gc log：
				I/art: <GC_Reason> <GC_Name> <Objects_freed>(<Size_freed>)<Objects_freed>(<Size_freed>)_freed>(<Large_object_size_freed>) <Heap_stats> LOS objects, <Pause_time(s)>

			GC.Reason ： GC触发原因（art/runtime/gc/gc_cause.h）
				Concurrent ：并发GC,该GC是在后台线程运行的，并不会阻止内存分配。
				AUoc ：当堆内存已满时，App尝试分配内存而引起的GC,这个GC会发生在正在分配内存的线程。
				Explicit : App显示的请求垃圾收集，例如调用System.gc。。
				NativeAlloc : Native内存分配时触发的GC。
				CollectorTransition ：由堆转换引起的回收，这是运行时切换GC而引起的。收集器转换包括将所有对象从空闲列表空间复制到碰撞指针空间(反之亦然)。当前，收集器转换仅在以下情况下出现：在内存较小的设备上，App将进程状态从可察觉的暂停状态变更为可察觉的非暂停状态(反之亦然)
				HomogeneousSpaceCompact ：齐性空间压缩是指空闲列表到压缩的空闲列表空间，通常发生在当App已经移动到可察觉的暂停进程状态。这样做的主要原因是减少了内存使用并对堆内存进行碎片整理。
				DisableMovingGc :不是真正的触发GC原因，发生并发堆压缩时，由于使用了GetPrimitiveArrayCritical,收集会被阻塞。一般情况下，强烈建不要使用GetPrimitiveArrayCritical,因为它在移动收集器方面具有限制。
				HeapTrim ：不是触发GC原因，但是请注意，收集会一直被阻塞，直到堆内存整理完毕。

			GC_Name：垃圾收集器名称
				Concurrent mark sweep (CMS) : CMS收集器是一种以获取最短收集暂停时间为目标收集器，采用了标记-清除算法(Mark-Sweep)实现。它是完整的堆垃圾收集器，能释放除了ImageSpace之外的所有的空间。
				Concurrent partial mark swe叩：部分完整的堆垃圾收集器，能释放除了Image Space和Zygote Spaces之外的所有空间。
				Concurrent sticky mark sweep :分代收集器，它只能释放自上次GC以来分配的对象。这个垃圾收集器比一个完整的或部分完整的垃圾收集器扫描的更频繁，因为它更快并且有更短的暂停时间。
				Marksweep + semispace :非并发的GC,复制GC用于堆转换以及齐性空间压缩（堆碎片整
				理）。
				Objects freed ：本次GC从非Large Object Space中回收的对象的数量。
				SizeJreed ：本次GC从非Large Object Space中回收的字节数。
				Large objects freed ：本次GC从Large Object Space中回收的对象的数量。
				Large object size freed ：本次GC从Large Object Space中回收的字节数。
				Heap stats：堆的空闲内存百分比（已用内存）/ （堆的总内存）。
				Pause times：暂停时间。

	4.	内存回收主要手段
		应用层
			onTrimMemory：lmk触发，AMS抛出到应用层的回调，目的是做内存释放，或者作为系统内存过低的监听
			gc 虚拟机层面的垃圾回收内存
		系统层
			Process.kill：signal 9 kill进程，释放占用的内存
			lmk(lowmemorykiller)：内存不足时杀掉优先级较低的进程来回收内存的策略
				lmk的演变：
					=<8.1 kernelspace lmk 监听: kswapd触发的shrink回调
					8.1-9.0 userspace lmk 监听：vmpressure
					>=10 userspace lmk 监听：PSI（Pressure stall information）
			app compaction(>=10):AMS与Kernel层联动对满足条件的App进行内存压缩
			kswapd：周期内存回收，对当前非活跃lru链表链尾的文件页、匿名页进行回收，其中匿名页回收会写入zram区间
				zram：Linux内核的功能,将内存的部分区域划分为压缩空间，内存较低时先通过内存压缩来变现获取更多内存使用空间，耗尽之后才使用磁盘, 变相提高内存利用率，本身会消耗部分CPU占用率来换内存空间的相对增加
				
				cat proc/meminfo（如果为0，则表明zram没有打开）
					SwapTotal:       2306044 kB    zram配置大小
					SwapFree:        1737380 kB    当前zram剩余大小



