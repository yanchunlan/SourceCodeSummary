一.	捕获
	Battery Historian 

二.	影响元素
	屏幕, GPS,CPU,Radio,Video/Audio,Wifi 或蓝牙

三.	监控
	监控进程： hook Location 时间, Alarm 次数,Net 访问量,wake_lock 持有时间,CPU
	收集数据到主进程，根据阀值
	aop:	ASM,javasisit,AspectJ
	nativeHook:		weishu 的 arthoook

	matrix里面的耗电监控

四.	处理建议
	省电这一块 主要是需要控制 wakelock 的使用。控制无谓的 CPU 运行和计算,项目有一些上传下载操作进行着,可采用高效下载策略,做到批量网络请求。可以交给JobScheduler 来处理,JobScheduler集中处理收到的任务,选择合适的时间合适的网络,再一起执行

	频繁定位类的 App 确实是耗电大户，可以在非必须的情况下，采用缓存数据，或者通过简化业务流程的情况下来进行优化

	避免在后台进行日志上报以及前台进行拉活工作

	如果面有一些任务的队列里面积累了大量的任务,每次都循环的执行任务太久,耗电会明显,然后如果项目存在大量轮询接口的时候,应该将其整合起来,减少CPU消耗对于网络请求或者 websocket 通信要对数据进行 gzip 压缩处理

	数据解析不要使用原生的 JSONObject ,应该使用 Gson jackson ptoBuffer 或者其他数据解析工具

	项目的直播或音频是电量消耗大户,可判断用户是否处于充电状态,在获取用户电量,在某个临界点时,降低直播码率,提高观看直播时间

	清单文件application标签下 keepScreeanOn 保持常量模式不够完善,导致用户长时间误操作情况下,屏幕长时间保持常亮。建议修改模式为: 用户5分钟未操作状态下,屏幕变暗且屏幕不关闭。满足屏幕处于开启状态下省电
	
	项目存在大量图片展示,图片加载时会消耗大量的流量与电量。可判断用户是否处于充电状态,在获取用户电量,在某个临界点,降低加载图片码率,提高操作时间


	

	
	