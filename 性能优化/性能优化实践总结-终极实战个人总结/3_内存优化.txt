一.	分析工具
	1.	adb
		ps -A | grep "xxx" 列出目标进程信息

		smaps：
			cat /proc/pid/status 的VmSize字段
			cat /proc/pid/smaps

		pmap：
			1.	读取前后pmap数据，脚本删除重复项，相同内容合并，其他增量显示

		meminfo:
			adb shell cat proc/meminfo
			adb shell dumpsys meminfo "xxx.xxx.xxx" > ~/Desktop/dump.txt 
			备注：
				dumpsys meminfo -> Debug.getMemoryInfo -> android_os_Debug ->
				mallinf/ getRuntime / proc/PID/smaps / d/kgsl/proc/PID/mem

		dumpheap:
			adb shell am dumpheap xxx.xxx.xxx 
			adb pull xxx
			hprof-conv ~/Desktop/dump.hprof >~/Desktop/dump1.hprof

	2.	memory profiler
		必须debug包

	3.	leakcanary


	4.	mat

	5.	prefdog
		宏观观测数据增减

二.	内存监控关注点
	1.	虚拟内存
		smaps
		pmap

	2.	java堆
		大小：Runtime.getRuntime().maxMemory
		当前：Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()
		具体分析：Dubug.dumpHprofData(String fileName)
		
		adb shell am dumpheap xxx
		adb pull xxx
		hprof-conv  xxx.hprof  xxx.hprof

	3.	FD数量
		IO、Socket及线程操作都有对应的FD，主要读取/proc下的虚拟文件
		大小限制：/proc/pid/limits 的Max open files字段
		当前状态：/proc/pid/fd，计算文件数量
		具体分析：/proc/pid/fd，通过Os.readlink解释文件链接

	4.	线程数量
		/proc/pid/status 的Threads字段
		Thread.getAllStackTraces() 获取当前所有线程的信息，线程名、调用栈及状态
		步骤：(可以在debug包，adb shell ，run-as 包名,一般是在异常的时候通过readlink的方式读取该字段并上报)
			ls -a -l /proc/<pid>/fd
			ps -t <pid>
			抓取hprof

			拓展：adb shell ps(process status)
				-A 查看手机所有的进程信息
			    -t 查看进程中线程的信息
			    -x 查看utime和stime
			    -P 查看属性
			    -p 查看调度策略，通常是查看一个app处于前台还是后台
			    -c 查看哪一个CPU在执行这个进程
			    name|pid 用名字或pid过滤
			列如：ps -A -T | grep 26308 | grep "GLThread" | wc -l   统计GLThread个数
			
	5.	Native内存
		主要是java堆内存，Debug.getMemoryInfo()以及/proc/pid/smap文件分析
		当前使用：nativePss
		具体分析：hook 业务每次malloc和free函数


三.	优化
	1.	设备分级
		小设备，老设备，不使用动画，特效

	2.	缓存管理
		OnTrimMemory管理
		1>	lowmemorykiller
			ActivityManagerService 统计所有进程状态，并时时更新进程对应的oomAdj，并传递到kernel层，kernel低内存回收机制，在内存到阀值触发清理oomadj值高的进程
			oomadj划分16级，-17～16
		2>	android Q 内存压缩优化方案
			app compaction 是以进程为单位触发文件页，匿名页回收的内存优化策略，上层FW提供优化，的进程依据。该策略在kernel很早就已经有了， 只是到Android Q才开始在FW上层做逻辑，AOSP该功能目前是默认关闭的，并且策略稍显简单

	3.	进程管理
		减少进程，常驻

	4.	安装包大小，代码，资源，图片，so按需加载

	5.	bitmap
		1>	统一图片库
		2>	统一监控
			大图监控，重复图片监控，图片总内存监控
			inline-hook方案监控createBitmap函数，获取图片尺寸大小，内存占用，堆栈
			拿到函数名办法（不同版本不同为了兼容）：
				adb pull system/lib/libandroid_runtime.so
				arm-linux-androideabi-nm -D libandroid_runtime.so | grep bitmap
			问题汇总：
				原始图片过大（非glide），需要裁剪
				相同图片重复创建
				未及时recycle
				web动态框架大图监控
				glide图片引擎问题
					1.	api>26默认到argb8888需要修改
					2.	图比view小放大解码的处理
					3.	业务不可见图片未释放
					4.	旧图加载引擎删减

		3>	内存泄露
			java内存泄露
				koom/Tailor

			oom监控
				Probe

			native内存泄露监控
				xhook malloc/free函数
				获取分配内存大小和地址，通过系统堆栈回溯机制追踪到业务函数调用堆栈指针地址（通过地址二分查找符号表找到对应函数名）
				记录每次申请和释放,写入到手机文件
				读取当前的smap文件
				内存记录文件”和“smap”文件进行离线分析，检测出内存泄漏、大内存等问题，输出内存占用情况

				拓展：
					1.	可以结合activity/fragment的生命周期统计native malloc/free的情况及退出后哪些内存没有释放的情况
					2.	堆栈回溯技术
						libunwind 				通用 			速度慢
						Instrunment-function	速度快			重编，包体增大	
						FramePointer			速度最快			重编，ndk>=20，arm64	

			so无法重编
				PLT Hook

			可重编
				GCC 的“-finstrument-functions”参数给所有函数插桩

	6.	内存监控
		采集方式
			5min采集一次pss，java堆，图片总内存
		计算指标
			内存异常率
			触顶率
			gc监控

四.	native监控工具
	malloc_debug	替换libc.so的malloc、free等函数；		adb操作					需要root,无法关联业务
	perfetto		heapprofd							adb操作/webui界面操作		>android10,无法关联业务
	loli_profiler	hook libc.so的malloc,free  			adb连接PC端工具			连接PC端工具,使用不灵活

	方案1：
		native hook监控，addr2line解析

五.	自检工具
	1.	内存增量
		nativepss

	2.	so库内存分析

	3.	图片监控
		1>	hook系
			参考weishu的epic库，me.weishu:epic:0.11.0
		2>	activity.Destroy中遍历View控件获取其bitmap及其宽高
		3>	glide/fresco
		4>	asm系
			setImageBitmap，setBackground等关键点插桩监控图片大小等

六.	内存问题检测步骤
	1.	adb shell cat proc/meminfo
		MemAvailable 可用内存

		SwapFree 未被使用交换空间的大小

		Slab  内核中slab分配的内存大小
		SUnreclaim  不可收回Slab的内存大小

	2.	adb shell dumpsys meminfo
		Total PSS by process:			Java层存活的进程及其占用内存情况
		Total PSS by OOM adjustment  	Native存活的进程及其占用内存情况
		xxx Persistent  				进程优先级

	3.	adb shell dumpsys meminfo pid
		Java、Native,Graphics,activitys

	4.	adb shell cat /proc/pagetypeinfo 系统内存碎片情况
		Unmovable 超过总数的20%,可能存在内存碎片

	5.	dumpsys cpuinfo 
		关注当前kswapd0 cpu占用率

	最终的问题划分为3个问题：java heap，native heap，kernel
	1> java heap
		生成hprof文件，mat观测. 单位1000000=1MB
		mat关注点：
		1）主要关注点
			histogram 	基于类观测
				shallow heap:指的是某一个对象所占内存大小
				retained heap:指的是一个对象及其引用的对象所包含对象所占内存的总大小[一般使用此判断内存问题]
			dominator_tree 	基于对象观测
				找到耗时对象，右键选择List Objects -> with incoming reference（引用树中的父节点,被哪些别人调用）
					右键选择Immediate Dorminator（引用树中的子节点,调用别人哪些）
				查看引用链：
					paths to gc roots -> exclude all phantom/weak/soft etc. references（弱引用、软引用及影子引用）
				区别：
					list objects 显示对象信息
					show objects by Class从对象里面显示类信息
			top consumers 	占用内存比较高的对象
			leak suspects 	内存泄漏怀疑点
			OQL  		sql操作
					select * from instanceof android.app.Activity
		2）查询集合划分
		
		3) bitmap && byte[]
			选中mBuffer 右键copy -> save value to file -> xxx.data文件
			选择bitmap 打开inspector窗口可以查看尺寸，使用GIMP工具，打开xxx.data文件，选择rgb alpha填入宽高，即可观测到图片
		4）堆对比
			打开2个文件，打开navigation history点击historgam,选择add to comp are basket 选择compare the result
			
		https://blog.csdn.net/yxz329130952/article/details/50288145
	2> native heap
		malloc debug 方案

	3> kernel

七.	内存监控统计
	1. 采集方式
		采样5min采样上报一次pss,java堆，图片总内存
	2. 计算指标
		内存异常率：内存 UV 异常率 = PSS 超过400MB 的 UV / 采集 UV （pss通过Debug.MemoryInfo 获取）
		触顶率：内存 UV 触顶率 = Java 堆占用超过最大堆限制的 85% 的 UV / 采集 UV

		是否触顶：
		long javaMax = runtime.maxMemory();
		long javaTotal = runtime.totalMemory();
		long javaUsed = javaTotal - runtime.freeMemory();
		// Java 内存使用超过最大限制的 85%
		float proportion = (float)javaUsed / javaMax;

	3. gc监控
		Debug.startAllocCounting 开启gc监控，有性能影响

		long allocCount = Debug.getGlobalAllocCount();
		long allocSize = Debug.getGlobalAllocSize();
		long gcCount = Debug.getGlobalGcInvocationCount();

		version > 6.0 使用如下：
		// 运行的GC次数
		Debug.getRuntimeStat("art.gc.gc-count");
		// GC使用的总耗时，单位是毫秒
		Debug.getRuntimeStat("art.gc.gc-time");
		// 阻塞式GC的次数
		Debug.getRuntimeStat("art.gc.blocking-count");
		// 阻塞式GC的总耗时
		Debug.getRuntimeStat("art.gc.blocking-time");
	
