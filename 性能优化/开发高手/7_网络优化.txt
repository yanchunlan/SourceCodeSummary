一.	基础
	1.	网络基础知识
		1>	无线网络
			了解5G（https://mp.weixin.qq.com/s/bPNuEbwZZS9uS5bKmHskTw）
		2>	Link Turbo
			使用 WiFi 的同时使用移动网络加速
	2.	网络 I/O
		1>	I/O 模型
			Linux 内核会把所有外部设备都看作一个文件来操作。在网络 I/O 中系统对一个 Socket 
			的读写也会有相应的描述符，称为 socket fd（Socket 描述符）
			同步：
				有阻塞 I/O、非阻塞 I/O 以及多路复用 I/O，信号驱动io（很少用）
			异步：	异步io（很少用）
		2>	数据处理
			I/O 的中断使用了软中断和硬中断，软中断/proc/softirqs，硬中断 /proc/interrupts
	3.	网络性能评估
		1>	延迟与带宽
			延迟：数据从信息源发送到目的地所需的时间。
			带宽：逻辑或物理通信路径最大的吞吐量。
		网络优化需要结合自己应用的实际情况来综合考虑
		2>	性能测量
			吞吐量：网络接口接收和传输的每秒字节数。
			延迟：系统调用发送 / 接收延时、连接延迟、首包延迟、网络往返时间等。
			连接数：每秒的连接数。
			错误：丢包计数、超时等。
				工具					描述
				strace					跟踪Soc ket相关的系统调用
				netstat					多种网络栈和接口统计信息
				ifconfig				接口配置
				ip						网络接口统计信息
				ping					测试网络连通性
				traceroute				测试网络路由
				tcpdump					网络数据包嗅探器
				抓包工具 Wireshark /Fiddler/Charles	图形化的网络数据报检查
		
	4.	总结
		检测 WiFi 不稳定时会自动切换到移动网络，如何区分是应用后台服务器/WiFi问题?
		如果一个 WiFi 发送过数据包，但是没有收到任何的 ACK 回包，这个时候就可以
		初步判断当前的 WiFi 是有问题的。这样系统可以知道当前 WiFi 大概率是有问题的
二.	优化
	1.	移动端优化
		1>	何为网络优化
			1.	速度
			2.	弱网络
			3.	安全
			网络请求流程：
				1.	DNS 解析
					DNS 解析耗时情况、运营商 LocalDNS 的劫持、DNS 调度
				2.	创建连接
					IP/ 端口该如何选择、是否要使用 HTTPS，能否需要创建连接
				3.	发送 / 接收数据
					根据网络状况将带宽利用好，侦测到网络延时，弱网络调整包大小
				4.	关闭连接
					主动关闭和被动关闭
			网络优化，就是围绕速度、弱网络、安全，减少每一个步骤的耗时，打造快速、稳定且安全的高质量网络
		2>	何为网络库
			网络库的作用：
			1.	统一编程接口
				统一做策略管理，流解析（JSON、XML、Protocol Buffers）
			2.	全局网络控制
				统一的网络调度、流量监控以及容灾管理
			3.	高性能
				速度，CPU、内存、I/O 的使用，以及失败率、崩溃率、协议的兼容性
		3>	高质量网络库
			蘑菇街、头条、UC 使用了Chromium ，拼多多、虎牙、链家、美丽说这使用 Mars
			OkHttp不支持跨平台
			Mars跨平台的 Socket层,不支持完整的 HTTP 协议,弱网络和连接上做了大量的优化，并且支持长连接
			Chromium享受 Google 后续网络优化,针对弱网络无优化，不支持长连接
	2.	大网络平台
		阿里的ACCS、蚂蚁的mPaaS、携程的网络服务
		1>	HTTPDNS
			DNS 的解析默认使用运营商的 LocalDNS 服务，有一些问题：
			1.	稳定性
				UDP 协议，无状态，容易域名劫持（难复现、难定位、难解决）
			2.	准确性
				LocalDNS 调度经常出现不准确
			3.	及时性
				运营商可能会修改 DNS 的 TTL，导致 DNS 修改生效延迟，不同运营商服务实现不一致
			微信，阿里云和腾讯云有自己的 HTTPDNS服务，增加精准的流量调度、网络拨测 / 灰度、网络容灾
			《DNS 优化》（https://mp.weixin.qq.com/s/iaPtSF-twWz-AN66UJUBDg）
			对客户端来说，我们可以通过预请求的方法，提前拿到一批域名的 IP，不过这里需要注意 IPv4 与 IPv6 协议栈的选择问题
		2>	连接复用
			先不把连接释放，连接池统一管理连接
			利用 HTTP 协议里的 keep-alive，HTTP/2.0 的多路复用则可以进一步的提升连接复用率。它复用的这条连接
			支持同时处理多条请求，所有请求都可以并发在这条连接上进行，
		3>	压缩与加密
			1.	压缩
			数据：
				请求 URL
				请求 header
				请求 body
			HTTP/2.0 连接本身的头部压缩技术，主要压缩请求 URL 和请求 body
			URL,公共参数传一次，其他参数接入层中进行参数扩展
			body，JSON 和 Protocol Buffers，一般用pb数据压缩率、序列化与反序列化好，但是复杂
			压缩算法，gzip，Google 的Brotli或者 Facebook 的Z-standard，Z-standard最好
			针对图片使用webp、hevc、SharpP压缩算法，基于 AI 的图片超清化
			2.	安全
				基于 HTTPS 的 HTTP/2 通道，已经有了 TLS 加密
				优化思路：
					1>	连接复用率
						多个域名共用同一个 HTTP/2 连接、长连接等
					2>	减少握手次数
						TLS 1.3可以实现 0-RTT 协商
					3>	性能提升
						ecc 证书代替 RSA
				针对Https，客户端设置了代理，TLS 加密的数据可以被解开并可能被利用，一般是锁定根证书
		4>	其他优化
			钱堆出来的也有部署跨国的专线、加速点，多 IDC 就近接入，但是一般只是使用CDN 服务、P2P 技术
	3.	QUIC 与 IPv6
		1>	QUIC
			QUIC 协议由 Google 在 2013 年实现，在 2018 年基于 QUIC 协议的 HTTP 更被确认为HTTP/3。在连接复用中我说过 
			HTTP/2 + TCP 会存在队首阻塞的问题，基于 UDP 的 QUIC 才是终极解决方案
			优点：
				灵活控制拥塞协议
				“真”连接复用
			缺点：
				创建连接成功率
				运营商支持
		2>	IPv6
			使用 IPv6 网络相比 IPv4 连接耗时可以降低 10%～20%，告别各种 NAT，P2P、QUIC 的连接
	4.	总结
		总结自己使用的网络优化？
三.	监控
	1.	移动端监控
		1>	如何监控网络
			1.	插桩
				360中OkHttp网络监控（https://github.com/Qihoo360/ArgusAPM）
				缺点是native的网络库无法监控
			2.	Native Hook
				一般Hook 下面几个方法：
					连接相关：connect。
					发送数据相关：send 和 sendto。
					接收数据相关：recv 和 recvfrom。
			3.	统一网络库
				太约束了，监控来说，这种一般很少用
		2>	如何监控流量
			通过TrafficStats监控，使用参考facebook的network-connection-class（https://github.com/facebook/network-connection-class）
			通过 /proc/net 我们还可以拿到大量网络相关的信息，例如网络信号强度、电平强度等
			Android进入测试模式：
				Android 手机：打开拨号界面，输入“*#*#4636#*#*”，然后按拨号键
	2.	大网络平台监控
		实时性。部分网络问题过时不候，可能很快就丢失现场。
		复杂性。可能跟国家、地区、运营商、版本、系统、机型、CDN 都有关，不仅维度多，数据量也巨大。
		链路长。整个请求链条非常长，客户端故障、网链障络、服务故障都有可能。
		1>	客户端监控
			关心的内容：
				时延。一般我们比较关心每次请求的 DNS 时间、建连时间、首包时间、总时间等，会有类似 1 秒快开率、2 秒快开率这些指标。
				维度。网络类型、国家、省份、城市、运营商、系统、客户端版本、机型、请求域名等，这些维度主要用于分析问题。
				错误。DNS 失败、连接失败、超时、返回错误码等，会有 DNS 失败率、连接失败率、网络访问的失败率这些指标
			分版本、分国家、分运营商、分域名监控时延和错误这些访问指标
		2>	接入层监控
			接入层的监控原因：
				实时性。客户端如果使用秒级的实时上报，对用户性能影响会比较大。服务端就不会存在这个问题，它很容易可以做到秒级的监控。
				可靠性。如果出现某些网络问题，客户端的数据上报通道可能也会受到影响，客户端的数据不完全可靠
			一般关心服务的入口和出口流量、服务端的处理时延、错误率等
		3>	监控报警
			实时监控。秒级或者分钟级别的实时监控的信息会相比少一些，例如只有访问量（PV）、错误率，没有去拆分几百个上千个维度，也没有独立访问用户数（UV），实时监控的目的是最快速度发现问题。
			离线监控。小时或者天级别的监控我们可以拓展出全部的维度来做监控，它的目的是在监控的同时，可以更好地圈出问题的范围。
	3.	总结
		通过 PLT Hook，代理 Socket 相关的几个重要函数，这次还增加了一个一次性 Hook 所有已经加载 Library 的方法