一.	概念
	1.	UI 渲染的背景知识
		1>	屏幕与适配
			手机屏幕分类:	LCD液晶显示器/OLED有机发光二极管
			Android推荐的做法dp适配，但有问题：
				1.	不同分辨率，控件大小不一致性
				2.	效率，设计师px,开发人员确是dp
			主流适配：
				1.	限制符适配方案
					https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650826381&idx=1&sn=5b71b7f1654b04a55fca25b0e90a4433&chksm=80b7b213b7c03b0598f6014bfa2f7de12e1f32ca9f7b7fc49a2cf0f96440e4a7897d45c788fb&scene=21#wechat_redirect
				2.	今日头条适配方案（通过反射修正系统的 density 值）
					https://mp.weixin.qq.com/s/oSBUA7QKMWZURm1AHMyubA
		2>	CPU 与 GPU
			图像 -> cpu计算-> 栅格化 -> Skia 绘制			
		3>	OpenGL 与 Vulkan
			早期版本为何有些绘制api不支持，就是因为opengles版本受限制
			android 7.0 -> opengles 3.2并添加Vulkan支持
	2.	Android 渲染的演进
		Android 的各个图形组件的作用：
			画笔：Skia 或者 OpenGL。 skia使用cpu,opengl使用gpu
			画纸: Surface。 surface -> SurfaceFlinger -> view -> window
			画板: Graphic Buffer。 < 4.1使用双缓冲，>4.1 使用三缓冲
			显示：SurfaceFlinger。将 WindowManager 提供的所有 Surface，通过硬件合成器 Hardware Composer 合成并输出到显示屏
		1>	Android 4.0：开启硬件加速
			未开启硬件加速的时候，渲染流程：
				view.draw -> surface ->	canvas.draw -> skia -> Graphic Buffer -> SurfaceFlinger -> display
			Surface。每个 View 都由某一个窗口管理，而每一个窗口都关联有一个 Surface。
			Canvas。通过 Surface 的 lock 函数获得一个 Canvas，Canvas 可以简单理解为 Skia 底层接口的封装。
			Graphic Buffer。SurfaceFlinger 会帮我们托管一个BufferQueue，我们从 BufferQueue 中拿到 Graphic Buffer，然后通过 Canvas 以及 Skia 将绘制内容栅格化到上面。
			SurfaceFlinger。通过 Swap Buffer 把 Front Graphic Buffer 的内容交给 SurfaceFinger，最后硬件合成器 Hardware Composer 合成并输出到显示屏	
			1.	硬件加速绘制
				3.0 开始支持硬件加速，4.0默认开启加速
				view.draw -> surface ->	canvas.draw -> opengl render -> gpu -> Graphic Buffer -> SurfaceFlinger -> display
				核心就是我们通过 GPU 完成 Graphic Buffer 的内容绘制。此外硬件绘制还引入了一个 DisplayList 的概念，每个 View 内部都有一个 
				DisplayList，当某个 View 需要重绘时，将它标记为 Dirty。当需要重绘时，仅仅只需要重绘一个 View 的 DisplayList，而不是像
				软件绘制那样需要向上递归。这样可以大大减少绘图的操作数量，因而提高了渲染效率
		2>	Android 4.1：Project Butter
			优化无止境，2012 i/o宣布Project Butter黄油计划
			1.	VSYNC 信号
				收到VSYNC中断，就准备buffer数据，应用在 VSYNC 边界绘制SurfaceFlinger 是 VSYNC 边界合成。可消除卡顿，提升图形的视觉表现
			2.	三缓冲机制 Triple Buffering
				三个 Graphic Buffer
			3.	数据测量
				Systrace，Traceview，系统增加了检测绘制过度工具
		3>	Android 5.0：RenderThread
			GL 命令执行都放到这个线程，减少主线程的绘制压力
		4>	未来
			Vulkan 必然是一个方向
			UI 渲染的优化2个方向：
				压榨硬件的性能，让 UI 可以更加流畅
				改进或者增加更多的分析工具，帮助我们更容易地发现以及定位问题
	3.	总结
		硬件加速问题：
			内存消耗
			兼容问题
		libhwui.so 相关的崩溃，发现是系统内部 RenderThread 与主线程数据同步的 Bug，通过规避的方法解决，
		可能是view复用，或者两个动画同时播放导致，解决是hook加上xlog日志，寻找清楚场景
二.	优化
	1.	UI 渲染测量
		测试工具：Profile GPU Rendering 和 Show GPU Overdraw （https://developer.android.com/studio/profile/inspect-gpu-rendering）
		问题定位工具：Systrace 和 Tracer for OpenGL ES，（https://developer.android.com/topic/performance/vitals/render）
			as3.0 后推荐Graphics API Debugger（GAPID） 替代Tracer for OpenGL ES
		上面的工具难以自动化，下面主要是为了解决自动化
		1>	gfxinfo 
			输出包含各阶段发生的动画以及帧相关的性能信息: 	adb shell dumpsys gfxinfo 包名
			最近 120 帧每个绘制阶段的耗时信息: 	adb shell dumpsys gfxinfo 包名 framestats
		2>	SurfaceFlinger
			4.1之后，每个surface有3个Graphic Buffer
			系统 SurfaceFlinger 相关的信息：	adb shell dumpsys SurfaceFlinger
	2.	UI 优化的常用手段
		16 ms（= 1000 ms／60 fps）
		1>	尽量使用硬件加速
			1.	不支持的 API，系统就需要通过 CPU 软件模拟绘制，这也是渐变、磨砂、圆角等效果渲染性能比较低的原因
			2.	SVG不支持硬件加速，提前将其转换为bitmap,对于其他圆角、渐变等场景，改为 Bitmap 实现,bitmap管理可采用glide的原理
		2>	Create View 优化
			1.	使用代码创建
				用于修改不频繁场景，X2C不支持xml直接转换为java
			2.	异步创建
				提前创建view，需要把looper的MessageQueue 替换成 UI 线程 Looper 的 Queue，在创建完 View 后我们需要把线程的 Looper 恢复成原来的
			3.	View 重用
				在不同 Activity 或者 Fragment 使用的 View 缓存机制，进入缓存池的 View 都已经“净身出户，无之前的状态
		3>	measure/layout 优化
			1.	减少 UI 布局层次
				<ViewStub> <Merge>
			2.	优化 layout 的开销
				ConstraintLayout 替代 RelativeLayout 或者 weighted LinearLayout
			3.	背景优化
				尽量不要重复去设置背景，主题背景也是
		针对textview的PrecomputedText 可以异步进行measure/Layout
	3.	UI 优化的进阶手段
		1>	Litho（Facebook基于Yoga研发）：异步布局
			1.	异步布局﻿
				measure 和 layout在后台线程执行
			2.	界面扁平化
				使用了Yoga，布局层次就降低了
			3.	优化 RecyclerView﻿
				原生的按照 viewType 来进行缓存和回收
				但是Litho，按照 text、image 和 video 独立回收的，这可以提高缓存命中率、降低内存使用率、提高滚动帧率
				缺点：
					加大了 UI 开发的复杂性，代码使用Java/Kotlin编写，无法做到AS预览
				或者使用Litho 中的 RecyclerCollectionComponent 和 Sections 来优化自己的 RecyelerView 的性能
		2>	Flutter（Google）：自己的布局 + 渲染引擎
			《Flutter》（https://github.com/flutter/flutter）
			《Flutter 原理与实践》（https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html）
				1.	首先 UI Runner 会执行 root isolate（可以简单理解为 main 函数。需要简单解释一下 isolate 的概念，isolate 是 Dart 虚拟机中一种执行并发代码实现，Dart 虚拟机实现了 Actor 的并发模型，与大名鼎鼎的 Erlang 使用了类似的并发模型。如果不太了解 Actor 的同学，可以简单认为 isolate 就是 Dart 虚拟机的“线程”，Root isolate 会通知引擎有帧要渲染）。
				2.	Flutter 引擎得到通知后，会告知系统我们要同步 VSYNC。
				3.	得到 GPU 的 VSYNC 信号后，对 UI Widgets 进行 Layout 并生成一个 Layer Tree。
				4.	然后 Layer Tree 会交给 GPU Runner 进行合成和栅格化。
				5.	GPU Runner 使用 Skia 库绘制相关图形。
		3>	RenderThread 与 RenderScript
			RenderThead 实现动画的异步渲染（https://mp.weixin.qq.com/s?__biz=MzUyMDAxMjQ3Ng==&mid=2247489230&amp;idx=1&amp;sn=adc193e35903ab90a4c966059933a35a&source=41#wechat_redirect）
			RenderScript 可以对图片进行各种操作处理
	4.	总结
		1. 在系统的框架下优化
			布局优化、使用代码创建、View 缓存
		2. 利用系统新的特性
			硬件加速、RenderThread、RenderScript
		3. 突破系统的限制
			Litho，Flutter
	5.	课后练习
		1.	使用 Litho 实现一个信息流界面。
		2.	使用 Flutter 写一个 Hello World，分析安装包的体积。