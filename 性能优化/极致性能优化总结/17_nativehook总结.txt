一.分类
	GOT/PLT Hook ，Trap Hook ，Inline Hook
	1.	GOT/PLT Hook
		替换某个 SO 的外部调用，通过将外部函数调用跳转成我们的目标函数
		1>	ELF 格式
			.plt。该节保存过程链接表（Procedure Linkage Table）。
			.got。该节保存着全局的偏移量表。
		2>	链接过程
		3>	GOT/PLT Hook 实践
			1.	微信 Matrix 开源库的ELF Hook，它使用的是 GOT Hook，主要使用它来做性能监控。
			2.	爱奇艺开源的的xHook，它使用的也是 GOT Hook。
			3.	Facebook 的PLT Hook。
	2.	Trap Hook
		函数内部的 Hook,在目标函数前断住程序，修改内存、程序段，继续执行
		1>	ptrace(断点调试):
			ptrace 提供了一种让一个程序（tracer）观察或者控制另一个程序（tracee）执行流程，
		以及修改被控制程序内存和寄存器的方法，主要用于实现调试断点和系统调用跟踪
		2>	如何 Hook
			主动 raise signal，然后使用 signal handler 来实现类似的 Hook 效果
		3>	Trap Hook 实践
			在“卡顿优化（下）”中, Facebook 的Profilo，就是通过定期发送 SIGPROF 信号来实现卡顿监控的
	3.	Inline Hook
		跟 Trap Hook 一样，Inline Hook 也是函数内部调用的 Hook。它直接将函数开始
		（Prologue）处的指令更替为跳转指令，使得原函数直接跳转到 Hook 的目标函数
		函数，并保留原函数的调用接口以完成后续再调用回来的目的
		1.	Inline Hook 实践
			1.	Cydia Substrate。在Chapter3中，我们就使用它来 Hook 系统的内存分配函数
			2.	adbi。支付宝在GC 抑制中使用的 Hook 框架，不过已经好几年没有更新了
二.	总结
	修复系统 Bug、线上监控 Native 内存分配
	
三.	之前所有优化中hook的总结
	inline hook 监听对象分配内存大小监控，Substrate框架（https://github.com/AndroidAdvanceWithGeektime/Chapter03），打开libart.so，针对libart.so，MSHookFunction拦截RecordAllocation函数，获取到内存的对象,做内存大小监听，对象释放等
	PLTHook 获取Atrace日志（https://github.com/AndroidAdvanceWithGeektime/Chapter06），打开libcutils.so，针对libc.so，hook_plt_method拦截write 函数，并打印log(打开函数，是因为获取对象调用Atrace的函数)
	PLTHook 获取线程创建的堆栈（https://github.com/AndroidAdvanceWithGeektime/Chapter06-plus），针对libart.so，hook_plt_method拦截pthread_create函数，(调用jave层getStack)获取堆栈并打印log
	PLTHook 获取网络请求信息（https://github.com/AndroidAdvanceWithGeektime/Chapter17），针对libc.so，hook_plt_method_all_lib拦截send/recv/sendto/recvfrom/connect函数，在connect时候，判断是inet/inet6就打印线程堆栈log
	javaHook代理对应的Service实现，完成收集Wakelock、Alarm、GPS的申请堆栈、释放信息、手机充电状态(https://github.com/simplezhli/Chapter19)
	
	拓展:
		PLTHook中hook_plt_method第一个参数是排除xxx.so,


	xhook:pltHook方案

四.	运行时aop
	1. Xposed: dalvik，需要root, Hook系统任意一方法
	2. Dexposed: dalvik,不需要root,只能hook本进程, https://github.com/alibaba/dexposed（2.0-5.0）
	3. Epic: art不需要root，本质上inline hook    https://github.com/tiann/epic （5.0-11）
	4. AndroidMethodHook: Andfix + Dexmaker 非系统方法
	5. frida python+java 二进制hook工具

五.	hooK总结 【上层到下层顺序排序】
	1. java hook (反射/动态代理hook)
		动态代理构造代理对象，反射替换进程对象。 列如：修改activityThread，修当前进程系统调用
	2. jni hook
		jni函数指针都保存在虚拟机的表，修改函数指针可以实现
	3. classLoader
		提前编译好修改好的class去替换
	4. Xposed
		java method保存在表，且每个方法都存在标识是否是jni函数，通过jni函数可查找native函数。 方案就是把hook函数修改为jni函数，并实现一个native函数。【总结：函数表中修改jni标志位，并指向一个native函数】

上面都是修改java层,下面开始修改native hook	

	5. got hook (动态链接库)
		加载动态链接库，通过dlopen函数把so读入当前进程内存区域，调用so时直接跳转到so的内存区域执行，so对外提供的函数表和函数地址都在这块内存中。 修改方案修改这块的函数地址。 列如native的IO重定向，malloc/free/open/write/read
		缺点：只能hook函数的入口，无法hook函数内部，so出现内联调用（不查表直接跳地址）出现异常
	6.	inline hook
		目标函数区域插入jump指令，使得cpu跳转到hook函数中，如果hook函数与原函数签名不一致，需要额外保持寄存器信息，跳转回原函数恢复寄存器信息。
		缺点：处理细节多，每个平台指令（armv7/armv8/x86）都需要兼容,稳定性不确定

Android 进程通信hook(进程数据交换依赖linux内核提供的进程通信接口，列如socket,binder)
	7.	binder进程通信hook
		动态代理替换proxy/imp等达到监控，列如：hook ams/wms/ims，如virtualApp,自动化检测等
	8.	socket 进程通信hook
		1. java层，xposed hook socket相关class即可
		2. 如果支持重连，可以自己构造socket去connect
		3. native层，got hook
	9.	IO 重定向
		建议使用got hook方式解决
