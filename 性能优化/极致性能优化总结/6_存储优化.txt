一.	存储认识
	1.	Android的分区
		/proc/partitions 或者 df 命令，查看的各个分区情况
		1>	/system 分区
			存放所有 Google 提供的 Android 组件的地方
		2>	/data 分区
			用户数据存放,
			系统升级和恢复的时候会擦除整个 /system 分区;恢复出厂设置，会擦除/data 
		3>	/vendor 分区
			存放厂商特殊系统修改的地方
	2.	Android 存储安全
		1>	权限控制
			每个应用都在自己的应用沙盒内运行,其他应用没有给权限就不能访问
		2>	数据加密
			Android 有两种设备加密方法：全盘加密和文件级加密
			>=4.4 全盘加密;	>=7.0 基于文件的加密
	3.	常见的数据存储方法
		存储就是把特定的数据结构转化成可以被记录和还原的格式
		1>	关键要素
			正确性
			时间开销
			空间开销
			安全
			开发成本
			兼容性
		2>	存储选项
			SharedPreferences，ContentProvider，文件，数据库
			1.	SharedPreferences 的使用
				7种问题：
				1>	跨进程不安全
					由于没有使用跨进程的锁,频繁读写导致数据丢失，万分之一概率
				2>	加载缓慢
					SharedPreferences文件的加载使用了异步线程,且无优先级，主线程读取数据就需要等待文件加载线程的结束
					建议提前用异步线程预加载启动过程用到的 SP 文件
				3>	全量写入
					commit()/apply(),改动一点，就全部写入，多次写入一个文件也没有合并再修改
				4>	卡顿
					onPause等，系统强制SharedPreferences写入磁盘，但是又是异步，如果未完成，就会ANR,卡顿等
				彻底搞懂 SharedPreferences（https://juejin.im/entry/597446ed6fb9a06bac5bc630）
			#优化：
				复写 Application 的 getSharedPreferences 方法替换系统默认实现，比如优化卡顿、合并多次 apply 操作、支持跨进程操作等
				微信的MMKV（https://github.com/Tencent/MMKV）
					实现原理（https://github.com/Tencent/MMKV/wiki/design）
					性能测试报告（https://github.com/Tencent/MMKV/wiki/android_benchmark_cn）
				mmkv优点：
					1>	使用mmap，性能更加高效
					2>	使用文件锁保证跨进程安全（看了介绍还是有些许不懂，待后期有时间再研究）
					3>	使用了photoBuffer格式
					4>	不支持加密，权限校验，不适合存放敏感数据
			2.	ContentProvider 的使用
				为什么SharedPreferences没有跨进程，就是为了希望大家使用ContentProvider跨进程
				1>	启动性能
					ContentProvider 的生命周期默认在 Application onCreate()
					AndroidManifest 中的 multiprocess开启，可以把Provider放置在本进程，但是也有多实例
				2>	稳定性
						ContentProvider 在进行跨进程数据传递时，利用了 Android 的 Binder 和匿名共享内存机制。
					简单来说，就是通过 Binder 传递 CursorWindow 对象内部的匿名共享内存的文件描述符。这样在
					跨进程传输中，结果数据并不需要跨进程传输，而是在不同进程中通过传输的匿名共享内存文件
					描述符来操作同一块匿名内存，这样来实现不同进程访问相同数据的目的
						ContentProvider比binder传递大小大
				3>	安全性
					比较笨重，适合传输大的数据
	4.	总结
		复写 Application 的 getSharedPreferences 方法替换系统默认实现
		修改了apply的实现，将多个apply方法在内存中合并，而不是多次提交
		当然待实现的 --- 还可以替换它的存储结构、增加加密等其他自定义
二.	优化存储
	1.	对象的序列化
		1>	Serializable
			1.	Serializable 的原理
				通过ObjectInputStream 和 ObjectOutputStream 来实现，用到大量反射，临时变量，序列化后文件比class文件大
			2.	Serializable 的进阶
				1>	writeObject 和 readObject
					通过它，可以对某些字段加密，序列化的加密
				2>	writeReplace 和 readResolve
					可实现版本兼容，可以把老版本的序列化对象转换成新版本的对象类型
				序列化：	-> writeReplace -> writeObject
				反序列化：	-> readObject -> readResolve
			3.	Serializable 的注意事项
				1>	不被序列化的字段
					static 变量,transient修饰，或者writeReplace/readResolve自定义序列化存储
				2>	serialVersionUID
					类的版本号,建议显示声明，因为隐式，若类有变化会导致serialVersionUID改变导致InvalidClassException
				3>	构造方法
					反序列不会执行构造，若逻辑依赖构造会有问题，当然可以自定义的反序列化修改
		2>	Parcelable
			目的是解决 Android 中大量跨进程通信的性能问题
			1.	Parcelable 的永久存储
				marshall 接口可以实现数据的永久存储，unmarshall不永久存储
			2.	Parcelable 的注意事项
				永久存储有2个问题：
					1>	系统版本的兼容性
						不同的版本，厂商修改，Parcel.cpp实现可能不同，导致差异，所以存在兼容性问题
					2>	数据前后兼容性
						类的版本出现升级，需要自己维护
				一般持久化存储，选择Serializable
		3>	Serial（Twitter 开源的高性能序列化方案）
			优点：
				1>	无反射
				2>	控制强
					开发者对于序列化过程的控制较强，可定义哪些 Object、Field 需要被序列化
				3>	有很强的 debug 能力，可以调试序列化的过程
				4>	有很强的版本管理能力，可以通过版本号和 OptionalFieldException 做兼容
	2.	数据的序列化
		1>	JSON
			优点：
				1.	相比对象序列化方案，速度更快，体积更小。
				2.	相比二进制的序列化方案，结果可读，易于排查问题。
				3.	使用方便，支持跨平台、跨语言，支持嵌套引用
			android自带的json,Google的Gson,阿里巴巴的fastJson,美团的mson
			自研的优点：
				1.	便利性。
					例如支持 JSON 转换成 JavaBean 对象，支持注解，支持更多的数据类型等
				2.	性能。
					减少反射，减少序列化过程内存与 CPU 的使用
			Gson 的兼容性最好，数据量大的时候，Fastjson 的性能更好
		2>	Protocol Buffers
			优点：
				1.	性能
					使用了二进制编码压缩，相比 JSON 体积更小，编解码速度也更快，protocol-buffers 编码规则（https://developers.google.com/protocol-buffers/docs/encoding）
				2.	兼容性
					跨语言和前后兼容性都不错，也支持基本类型的自动转换，但是不支持继承与引用类型
				3.	使用成本
					Protocol Buffers 的开发成本很高，需要定义.proto 文件，并用工具生成对应的辅助类。辅助类特有一些序列化的辅助方法，
					所有要序列化的对象，都需要先转化为辅助类的对象，这让序列化代码跟业务代码大量耦合，是侵入性较强的一种方式
			复杂，生产方法多，可以修改自动代码生产工具修改，列如微信，xxx extends com.tencent.mm.protocal.protobuf 只需要实现op（xx）即可
			#google 还推荐使用FlatBuffers（https://www.race604.com/flatbuffers-intro/）
	3.	存储监控
		1>	性能监控
			1.	正确性
				列如 自研的SharedPreferences，自研的 SP 文件头部会有专门的校验字段，比如文件长度、关键位置的 CRC 信息等，
				可以识别出更多的文件损坏场景。在识别出文件损坏之后，我们还可以进一步做数据修复等工作
			2.	时间开销
				主要是初始化耗时与读写耗时，系统的SharedPreferences初始化，文件越大耗时越久，而自研的不会这样
			3.	空间开销
				主要是内存空间和ROM空间，内存空间需要考虑 GC 和峰值内存，ROM 空间需要考虑做清理逻辑，例如数据超过 1000 条或者 10MB 后会触发自动清理或者数据合并
		2>	ROM 监控
			文件遍历在api26之后使用FileVisitor替代 ListFiles
			监控指标，文件总大小/总文件数量（大小>400MB->空间异常率，数量>1000->数量异常率）
			做用户存储树，剪枝算法，保留最大的3个文件夹，每个文件夹保留5个随机文件，并且可远程操控，可以获取用户完整存储树，并可以支持下方清理规则
	4.	总结
		谈谈对 对象序列化/数据序列化方案 的体会
三.	sqlite使用及优化
	1.	SQLite 的那些事儿
		创业团队的Realm、Google 的LevelDB,腾讯的WCDB
		深入研究 SQLite 的源码，从 SQLite 的 PRAGMA 编译选项、Cursor 实现优化，到 SQLite 源码的优化
		1>	ORM
			出名的ORM框架有greenDAO和 Google 官方的Room，其中为了与javapck互动，WCDB 选择 Room 作为 ORM 框架
		2>	进程与线程并发
			常见的SQLiteDatabaseLockedException就是因为并发导致
			1.	多进程并发
				通过文件锁来控制多进程的并发
			2.	多线程并发
				SQLite 锁的粒度都是数据库文件级别，并没有实现表级甚至行级的锁,
				使用 WCDB 在初始化的时候可以指定连接池的大小
				为了提高并发性能，我们还可以打开WAL（Write-Ahead Logging）模式
		3>	查询优化
			1.	索引优化
				1>建立正确的索引。	
					选择最高效的索引
				2>单列索引、多列索引与复合索引的选择。	
					复合索引直接在索引表返回查询结果
				3>索引字段的选择。	
					整型类型索引效率会远高于字符串索引，主键尽量不要用复杂字段
			2.	页大小与缓存大小
				每个表对应的数据在整个 DB 文件中都是通过一个一个的页存储
				SQLite 页缓存，加快下次读取速度。页大小默认是 1024Byte，缓存大小默认是 1000 页
					建议大家在新建数据库的时候，就提前选择 4KB 作为默认的 page size 以获得更好的性能
			3.	其他优化
				慎用“select*”，需要使用多少列，就选取多少列。
				正确地使用事务。
				预编译与参数绑定，缓存被编译后的 SQL 语句。
				对于 blob 或超大的 Text 列，可能会超出一个页的大小，导致出现超大页。建议将这些列单独拆表，或者放到表字段的后面。
				定期整理或者清理无用或可删除的数据，例如朋友圈数据库会删除比较久远的数据，如果用户访问到这部分数据，重新从网络拉取即可。
			复习：
				引进 ORM，可以大大的提升我们的开发效率。通过 WAL 模式和连接池，可以提高 SQLite 的并发性能。通过正确的建立索引，
				可以提升 SQLite 的查询速度。通过调整默认的页大小和缓存大小，可以提升 SQLite 的整体性能
	2.	SQLite 的其他特性
		1>	损坏与恢复
			《信移动端数据库组件 WCDB 系列（二） — 数据库修复三板斧》（https://mp.weixin.qq.com/s/Ln7kNOn3zx589ACmn5ESQA）
			《微信 SQLite 数据库修复实践》(https://mp.weixin.qq.com/s/N1tuHTyg3xVfbaSd4du-tw)
		2>	加密与安全
			一个是防注入，一个是加密。防注入可以通过静态安全扫描的方式，而加密一般会使用 SQLCipher 支持
			SQLite 的加解密都是以页为单位，默认会使用 AES 算法加密，加 / 解密的耗时跟选用的密钥长度有关
			《微信移动数据库组件WCDB（四） — Android 特性篇》（https://mp.weixin.qq.com/s/NFnYEXSxAaHBqpi7WofSPQ）
		3>	全文搜索
			《微信全文搜索优化之路》（https://mp.weixin.qq.com/s/AhYECT3HVyn1ikB0YQ-UVg）
		我们需要根据自己的项目情况综合考虑。假如某个数据库存储的数据并不重要，这个时候万分之一的数据损坏率我们并不会关心。
		同样是否需要使用数据库加密，也要根据存储的数据是不是敏感内容
	2.	SQLite 的监控
		1>	本地测试
			每写一个 SQL 语句，都应该先在本地测试
		2>	耗时监控
			1.	集成自己的监控，自己增加监控的模块
			2.	WCDB 增加了SQLiteTrace的监控模块，有以下三个接口：onConnectionPoolBusy/onDatabaseCorrupted/onSQLExecuted
				通过这些接口监控数据库 busy、损耗以及执行耗时。针对耗时比较长的 SQL 语句，需要进一步检查是 SQL 语句写得不好，还是需要建立索引
		3>	智能监控
			<Matrix SQLiteLint -- SQLite 使用质量检测>(https://mp.weixin.qq.com/s/laUgOmAcMiZIOfM2sWrQgw)
			美团SQLAdvisor 
				<SQL解析在美团的应用>(https://tech.meituan.com/2018/05/20/sql-parser-used-in-mtdp.html)
				<美团SQL优化工具SQLAdvisor开源>(https://tech.meituan.com/2017/03/09/sqladvisor-pr.html)
	4.	总结
		掌握了 SQLite 数据库并发的机制，在某些时候我们可以更好地决策应该拆数据表还是拆数据库。新建一个数据库好处是可以隔离其他库并发或者损坏的情况，
		而坏处是数据库初始化耗时以及更多内存的占用。一般来说，单独的业务都会使用独立数据库，例如专门的下载数据库、朋友圈数据库、聊天数据库。但是数
		据库也不宜太多，我们可以有一个公共数据库，用来存放一些相对不是太大的数据。在了解 SQLite 数据库损坏的原理和概率以后，我们可以根据数据的重要
		程度决定是否要引
		入恢复机制。我还讲了如何实现数据库加密以及对性能的影响，我们可以根据数据的敏感程度决定是否要引入加密
	5.	课后
		尝试接入 WCDB，对比测试系统默认 SQLite 的性能。尝试接入Matrix SQLiteLint（https://github.com/Tencent/matrix/tree/master/matrix/matrix-android/matrix-sqlite-lint）
		《全面解析SQLite》（https://github.com/AndroidAdvanceWithGeektime/Chapter14/blob/master/%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90SQLite.pdf）