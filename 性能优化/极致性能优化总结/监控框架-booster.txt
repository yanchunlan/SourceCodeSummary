一.	booster实现的框架分析
	主要是利用gradle插件字节码插入代码实现功能，其中主要的是transform的实现，
	流程如下：
		BoosterPlugin : Plugin<Project>
		->	android.registerTransform(BoosterAppTransform()) // 加载所有的transform
		->	BoosterTransform.transform 内部工作交给了 BoosterTransformInvocation 实现
		->	BoosterTransformInvocation代理了TransformInvocation，使用了ServiceLoader加载所有的transform, 并依次调用transform方法

二.	性能优化
	1.	booster-transform-lint 性能瓶颈检测 
		支持动态添加依赖或者注入某些类和库(比如插桩、无埋点统计等)
		1.	指定检测方法
			LintTransformer 直接检测指定的方法，列如Aplication/Activity/Service/BroadcastReceiver/ContentProvider等API
		2.	检查有没有调用敏感的API
			analyse()用来检查当前API是否命中了Lint检查列表。如果命中就会加入到dot文件绘图节点中。
			booster默认定义的敏感API有:	xxxxx/android/graphics/Bitmap... ;主要是一些可能导致主线程卡顿的API。
		3.	检测demo
			检查之后生成树形访问链，列如：
			MainActivity -> MainActivity。onCreate（Bundle） -> MainActivity.getSharedPreferences(String,int)
	2.	booster-transform-analyser 静态分析
		类继承分析：	classLoader 加载所有类，判断有无继承关系
		静态分析入口：	
			四大组件 -> mergedManifests 之后获取到合并的AndroidManifest，即可获取到组件
			自定义View -> mergeRes 之后通过aapt2生成flat文件，但是解析flat文件太慢，所以只解析flat头，然后在定位源文件xml,解析xml
			线程注解 ->  Thread Annotations标注类，方法就是入口，兼容eventBus的@Subscribe(threadMode = MAIN)也是主线程入口
	3.	booster-transform-thread 多线程优化 
		1.	降低线程数量
			将线程池的corePoolSize设置0，不为核心线程就可以销毁
			为 maxPoolSize 设置上限Math.min(maxCorePoolSize, NCPU)，因为多个线程池都设置一样的，在某一时刻会导致大量线程池存在
			允许核心线程空闲时自动销毁，设置executor.allowCoreThreadTimeOut(true)，目的是回收核心线程
			HandlerThread 替换成 SingleThreadPoolExecutor，主要是销毁线程
		2.	给所有线程设置name
			编译时通过修改字节码文件动态给HandlerThread、Timer、AsyncTask、Thread、ThreadPoolExecutor等开启的线程都起了名字
			主要是检测thread创建的时候，新加一个方法执行线程设置name方法
		3.	线程池静态方法替换
			替换为新增了name的初始化方法
	4.	sharePreferences 优化
		apply，只是数据加在队列,在pause的时,从队列取出,主线程执行队列消息的run，容易造成anr
		通过自定义的sharePreference，asm方式动态替换解决onPause(), onDestroy()回调时在主线程的同步操作
		其中不参考mmkv的方式是因为：
			无OnSharedPreferenceChangeListener
			MMKV 未校验数据类型
			MMKV 与系统原生 API 的行为不一致
	5.	WebView 预加载
		主要是加载webView的时候，加载Chromium,导致时间久，导致anr
		加载流程：
			webView.init -> 
			webViewChromium.init -> 
			webViewChromiumFactoryProvider.startYourEngines ->
			webViewChromiumAwinit.startYourEngines -> ensureChromiumStartedLocked
		通过android.webkit.WebViewFactory的getProvider方法可以得到Provider，在执行其startYourEngines就可以初始化Chromium引擎
		将上面的初始化引擎的插装在application的onCreate方法里面
三.	包体积瘦身
	主要做了三件事
		1.	删除资源
		2.	压缩图片资源
		3.	重新压缩resourceXX.ap_文件中的资源
		回顾资源编译步骤，看com.android.tools.build:gradle源码assembleRelease，在ApplicationTaskMamager.java中
		看得出来是有：
			下载依赖
			合并Manifest文件(MergeApkManifestsTask)
			合并res资源(MergeResourcesTask)
			合并assets资源(MergeAssetsTask)
			处理资源,生成_.ap文件(ApkProcessTesTask)
		资源压缩，就是创建了一些task在上面步骤之间	
	1.	png图片压缩
		在mergeRes与processRes之间执行，压缩操作，且根据aapt2是否开启做了区分
	1.	webP图片压缩
		在14-17之间，webP是不支持带alpha通道的图
		sdk>17,使用cwebp命令将图片转为webp格式
		sdk<17,使用pngquant命令对图片进行压缩
		图片压缩具体实现：
			assets下的图片资源压缩（flutter引入的话会导致失效）
			res下的图片资源压缩
		创建一个task,转换图片即可，压缩命令如下：ActionData(input, output, listOf(cmdline.executable!!.absolutePath, "-mt", "-quiet", "-q", "80", "-o", output.absolutePath, input.absolutePath))
		cmdline.executable!!.absolutePath就是代表cwbp命令的位置。
		注意：goolePlay上架，icon必现是png
	2.	zip文件压缩
		processRes执行后，生成ap_文件（AndroidManifest，res/*，resources.arsc），其实就是一个zip文件
		但是执行生成ap_文件后，因为有2种压缩格式STORED（未压缩），DEFLATED（压缩），所以可能未压缩
		processRes执行后，重新压缩ap_,并且指定格式其就是DEFLATED（压缩），保证其一定是压缩了
		：：遍历找到所有resourcesXX.ap_文件，对他们进行重新压缩打包，ap_.repack就是压缩的方法，并生成报告，压缩前，压缩后大小
	3.	资源索引内联（R去除，field去除）
		解析 Symbol List (R.txt)，在transform 将 getfield 指令替换成 ldc 指令
		该transform shrink的主要逻辑实现步骤如下：
			1.读取符号列表symbolList，步骤6用到
			2.读取白名单，支持类和常量字段粒度。（反射等）
			3.考虑三方库需要保留的常量 （support,greenDao）
			4.删除多余R类
			5.删除常量
			6.用常量替换资源索引
	4.	移除冗余资源
		实质上是保留最高 density 的资源，移除其他低 density 的资源
		1>	冗余资源删除
			在MergeResourcesTask之后执行
			val klassRemoveRedundantFlatImages = if (aapt2) RemoveRedundantFlatImages::class else RemoveRedundantImages::class
			variant.project.tasks.create（xxx）.dependsOn(variant.mergeResourcesTask)
		2>	aapt冗余资源的移除
			booster里面的 RemoveRedundantImages 什么都不做处理，因为gradle自己会移除资源
			Gradle会在以下位置查找重复资源：
				与主源集关联的主资源，通常位于 src/main/res/。
				变体叠加,来自编译类型和编译特性。
				库项目依赖项。
			Gradle会按以下级联优先顺序合并重复资源 : 依赖项 → 主资源 → 编译特性 → 编译类型
		3>	aapt2冗余资源的移除
			gradle 3.0.0 使用了aapt2编译
			booster 里面针对 RemoveRedundantFlatImages 操作是，在资源合并后，对于同名的png图片，它会取density最高的图片，然后把其他的图片删除
四.	修复系统异常
	1.	booster-transform-activity-thread
		Hook了ActivityThread.mH.mCallback，使用代理类代理它，在代理类的handleMessage中
		针对this.mHandler.handleMessage(msg); try catch住异常，检查异常的堆栈，如果是包名开头
		（"java.","android.","androidx.","dalvik.","com.android.），就上报这个系统的异常
	2.	booster-transform-toast
		Toast 在7.1 上面会奔溃，解决方式是try catch住它
		通过字节码插桩替换系统的Taost.show()变为了ShadowToast.show()，其中ShadowToast有catch的处理
	3.	booster-transform-res-check
		修复了"检查覆盖安装导致的 Resources 和 Assets 未加载的 Bug"
		解决方式：
			Application.attachBaseContext/onCreate中判断资源是否加载，如果没有加载的话直接kill掉应用
			if (null == app.getAssets() || null == app.getResources()) {
				final int pid = Process.myPid();
				Process.killProcess(pid);
				System.exit(10);
			}
	4.	booster-transform-media-player
		把崩溃的地方try-catch住,然后通过gradle transform动态替换掉代码中的MediaPlayer
		类似于：
			public static MediaPlayer newMediaPlayer() {
				return workaround(new MediaPlayer());// workaround catch 异常的类
			}

	5.	booster-transform-finalizer-watchdog-daemon
		finalizer导致的TimeoutException : 简单的说就是对象的finalize()执行时间过长
		解决方式：
			1.	反射停掉FinalizerWatchdogDaemon线程
				try {
					Class clazz = Class.forName("java.lang.Daemons$FinalizerWatchdogDaemon");
					Method method = clazz.getSuperclass().getDeclaredMethod("stop");
					method.setAccessible(true);
					Field field = clazz.getDeclaredField("INSTANCE");
					field.setAccessible(true);
					method.invoke(field.get(null));
				} catch (Throwable e) {
					e.printStackTrace();
				}
			2.	try-cathch 住异常
				final Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
				Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
					@Override
					public void uncaughtException(Thread t, Throwable e) {
						if (t.getName().equals("FinalizerWatchdogDaemon") && e instanceof TimeoutException) {
							 //ignore it
						} else {
							defaultUncaughtExceptionHandler.uncaughtException(t, e);
						}
					}
				});
			3.	booster方案-手动停掉FinalizerWatchdogDaemon线程，在application创建的时候新开一个线程执行
五.	其他
	1.	booster-task-all/booster-transform-all 动态加载模块
		可以定制task和transform，然后设置classpath
	2.	booster-task-check-snapshot Release构建依赖检测
		检查dependencies 的依赖，如果有SNAPSHOT，就打印出log
	3.	booster-task-list-permission 权限清单检测
	4.	booster-task-list-shared-library 动态库清单
	5.	booster-task-list-artifact 构建中间产物清单
		打印构建过程的细节和内部实现，以便于在合适的时机插入特定的 Task 来获取 AGP 的中间产物，为了方便 Gradle Plugin 的开发者
五.	原理讨论
	1.	不可编译无用assets资源优化
		1.找出assets资源
			packageDebug / packageRelease 执行前，可以找到input的dex和assets
		2.反汇编dex找出usedAssetsResources
			反汇编apk包中dex文件，在内存生产smali相关数据，检索  const-string 指令 line，根据const-string指令 后面字符串常量值 与 assets资源名是否相等，找出usedAssetsResouces
		3.根据配置解析出无用assets白名单
		4.根据前三步，得到unusedAssetsResources
		5.删除unusedAssetsResources文件
			直接添加一个在 packageDebug / packageRelease 前doRemoveUnusedAssetsResources的task就可以了
		