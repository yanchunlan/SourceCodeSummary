卡顿
一.	基础知识
	1.	cpu性能
	2.	卡顿问题分析指标
		cpu使用率
		cpu饱和度
	3.	android卡顿排查工具
		1.	Traceview
			利用 Android Runtime 函数调用的 event事件，将函数运行的耗时和调用关系写入 trace 文件中
			实操：
				1. 具体代码中加入startMethodTracing/stopMethodTracing,调用的时候就会生成trace文件
				2. 或者使用ddms的tart Method Profiling / Stop Method Profiling,生成trace文件再观察，
				3. traceView上半部分看线程执行时间，下半部分看具体线程方法
				4. 或者点击TraceView 中的 Cpu Time/Call，可以看那个方法占据cpu时间长
				5. 点击TraceView 中的 Cpu Time/Call，从高到底，一个个排查那个方法和子方法调用时间比较长
		2.	Uber开源的Nanoscope(十分适合做启动耗时自动化分析)
			直接修改虚拟机源码，在ArtMethod执行入口和执行结束位置增加埋点代码，将所有的信息先写到内存，等到 trace 结束后才统一生成结果文件
		3.	systrace
			利用了 Linux 的ftrace调试工具，相当于在系统各个关键位置都添加了一些性能探针
			自动实现：可以使用编译时给每个函数插桩解决
			实操：
				1. Trace.beginSection()/endSection
				2. ddms里面直接打开查看
		4.	Simpleperf
			可以看到所有的 Native 代码的耗时，
		总结：
			Simpleperf：分析native代码耗时
			系统调用：systrace
			整个程序执行流程耗时：Traceview，systrace
	4.	可视化方法
		androidStudio3.2以上的profiler
		1.	call chart
			按照函数的执行顺序展示
		2.	flame chart（火焰图）
			可以比较快速的看到那个维度耗时多
	5.	总结：
			系统打印CPU信息到日志，是使用ProcessCpuTracker.java，通过检查几个文件查询系统的cpu使用率
			原理如下：
			系统CPU信息:	/proc/stat		System TOTAL: 2.1% user + 16% kernel + 9.2% iowait + 0.2% irq + 0.1% softirq + 72% idle
			CPU核数:		/proc/cpuinfo	CPU Core: 8
			负载:			/proc/loadavg	Load Average: 8.74 / 7.74 / 7.36
			各线程负载：
				进程CPU使用情况：					/proc/[pid]/stat
				获得进程下面各个线程的CPU使用情况：	/proc/[pid]/task/[tid]/stat
					Threads:
					  43% 23493/singleThread(R): 6.5% user + 36% kernel faults：3094
					  3.2% 23485/RenderThread(S): 2.1% user + 1% kernel faults：329
					  0.3% 23468/.sample.io.test(S): 0.3% user + 0% kernel faults：6
					  0.3% 23479/HeapTaskDaemon(S): 0.3% user + 0% kernel faults：982
					  ...
二.	监控卡顿
	1.	消息队列
		利用替换Looper 的 Printer实现，或者线程定时发送1s监控消息
	2.	插桩
		目的是监听函数执行的耗时
		做法：在函数的入口，出口，加入耗时监控的代码
			a> 避免方法数暴增
				编译时给每个方法分配id
			b> 过滤简单的函数(类似于微信的matix)
				缺点:无法监控系统的函数
	3.	profilo
		1.	集成atrace功能
		2.	快速获取java堆栈
			native奔溃捕获java堆栈，发送sigpof信号，获取搭到线程，通过线程对象获取ManagedStack
			，在从其中获取ShadowFrame，QuickFrame获取到调用栈，unwind出java的堆栈
		3.	其他监控
			Android Vitals
			1.	帧率
				getWindow().getDecorView().getViewTreeObserver().addOnDrawListener
			2.	生命周期监控
				监控生命周期的启动和耗时，判断是否频繁的被拉起
				可以采用Hook方式，但是9.0后被禁止，就最好使用编译时插桩Aspect、ASM 和 ReDex
		3.	线程监控
			1.	线程数量
				hook 线程的 nativeCreate() 函数
			2.	线程时间
				监控线程的用户时间 utime、系统时间 stime 和优先级
		总结：
			Facebook 的profilo的实现原理？
			（JVM的AsyncGetCallTrace，再适配Android runtime实现，systrace 使用的是 Linux 的 ftrace，Simpleperf 参考了 Linux 的 perf 工具
		sample :
			使用 PLTHook 技术来获取 Atrace 的日志
			###（linker文件夹里面就是pltHoook的库）
三.	分析案列
	1.	java分析
		1>	获取java线程状态
			Thread.getState()
		2>	获得所有线程堆栈
			Thread.getAllStackTraces()
	2.	SIGQUIT 信号实现（查看ANR日志）
		1>	Native 线程状态
			Android 9.0 就定义了 27 种线程状态
		2>	获得 ANR 日志
			监控到卡顿，主动向系统发送 SIGQUIT 信号，等待/data/anr/traces.txt文件生成
	3.	hook实现
		1>	libart.so、dlsym调用ThreadList::ForEach方法，拿到所有的 Native 线程对象
		2>	遍历线程对象列表，调用Thread::DumpState方法
		3>	fork 子进程实现，在子进程中实现此逻辑
		4>	加入CPU 使用率和调度信息，内存相关信息，I/O 和网络相关
	4.	卡顿分析
		1>	卡顿率
			UV 卡顿率 = 发生过卡顿 UV / 开启卡顿采集 UV
			PV 卡顿率 = 发生过卡顿 PV / 启动采集 PV
		2>	卡顿树
	总结：使用PLTHook 获取线程的堆栈信息，（线程创建就抛出异常打印栈信息）
		###（linker文件夹里面就是pltHoook的库）