一、垃圾回收算法
	1.标记-清除算法 Mark-Sweep
		标记出所有需要回收的对象，然后统一清除回收，
		
		缺点： 
			效率低，直接回收标记的对象，容易造成内存碎片
	2.复制算法 Copying
		将一个内存划分2半，一个内存不足的可用对象复制到另一块内存相等的上面，在清除使用的原来那块
		
		缺点：
			内存只有原来的一半，对象存活率较高的时候，需要复制的对象，以及复制的次数增加，导致效率，
			且如果不够，还需要额外空间担保，划分到其他位置去
	3.标记整理算法 Mark-Compact
		可用对象标记，让所有存活的对象移到一端，然后直接清理掉端边界以外的内存
		
		缺点：
			额外的空间来保存迁移地址，需要遍历多次堆内存

二、分代收集算法

	一般虚拟机都不会只使用一个算法，根据不同的对象生命周期使用不同的收集方式
		java堆分为新生代，老生代，新生代死亡快，使用复制算法，老生代存活率高，使用“标记-清理”或“
	标记-整理”算法来进行回收
	
	
	young:					edenSpace(8)		 fromSpace(1)	 	toSpace(1)
																		|
												________________________|	
												|
	old:								  tenuredSpace
												
	
	permanent:							  permanentSpace
	
	
	
	1>新生代 Young Generation
	
		1.	新生代内存按照 8:1:1 的比例分为一个 Eden Space （亚丹）区和两个 Survivor（夏娃）区，
		From Space 和 To Space
		2.	新建的对象都是在新生代分配内存。
			a. 首先，每次使用 Eden 区和一块 Survivor 区 From Space。（即每次新生代可用内存为 90%）

			b. 当 Eden 和 From Space 满时，触发新生代回收 Minor GC ，将 Eden 和 From Space 中还存活着的对象一次性地复制到 To Space 空间上，最后清理掉 Eden 和刚 From Space 空间。然后交换 From Space 和 To Space。

			c. 每一次 Minor GC，把存活下来的对象年龄 +1，当某个对象的年龄达到老年的标准，就移到老年代中。 
		3.	上面对象98%可回收，部分不能回收，就需要（老年代）分配担保，通过担保机制进入老年代
		4.	通过担保，如果这时候老年代内存也满了，会触发老年代的回收。新生代和老年代一起回收（Full GC）
		5.	新生代采用 Copying 算法
		
	2>老年代 Old Generation
	
		1.用于存放新生代中经过 N 次垃圾回收仍然存活的对象，以及 To From 不足时候，担保的对象。
		2.内存比新生代也大很多(大概比例是1:2)。
		3.当老年代内存满时触发回收 Major GC 。
		4.老年代采用 Mark-Compact 算法。
		
	3.永久代 Permanent Generation
	
		1.主要存放所有已加载的类信息，方法信息，常量池等等。
		2.并不等同于方法区，只不过是主流的 Sun 公司的 Hotspot JVM 用永久代来实现方法区而已，有些虚拟机没有
		永久带而用其他机制来实现方法区。
		3.这个区域存放的内容与垃圾回收要回收的Java对象关系并不大。

三.	垃圾收集器

		不同厂商，不同版本虚拟机提供的垃圾收集器不同，并且可以根据参数供用户根据自己的应用特点和要求
		组合出各个年代所使用的收集器
		
		图片： 1——垃圾收集器——总览
		
		1.Serial （串行）收集器
		
			曾经是 JVM 新生代的唯一选择，一个单线程的收集器，主要是在收集的时候，其他工作线程需要暂停
			，待其收集完成
			
			缺点：暂停程序
			优点：简单高效，没有多余的线程交互，在 client 版本的 java 中是默认的新生代收集器
		
		2.ParNew 收集器
			多线程收集垃圾，其余跟serial一致
			
			是 server 版本的虚拟机中首选的新生代收集器
			
		3.Parallel Scavenge 收集器
			使用复制算法的，并行的多线程收集器
		
			它的关注点在控制吞吐量，也就是 CPU 用于运行用户代码事件于 CPU总消耗时间的比值。所以吞吐量=运行用户代
			码时间/(运行用户代码时间+垃圾收集时间)。虚拟机总共运行100分钟，其中垃圾回收花掉1分钟，则吞吐量为 99/99+1 = 99%。

			而吞吐量越高表示垃圾回收时间占比越小，CPU 利用效率越高。所以这个收集器也被称为”吞吐量收集器”. 
			高吞吐量为目标，即减少垃圾收集时间，让用户代码获得更长的运行时间
			
		4.Serial Old收集器
		
			老年代版本的串行收集器，使用标记整理算法
			
		5.Parallel Old 收集器
		
			老年代版本的 Parallel Scavenge 收集器，使用多线程采集，标记整理算法
		
		6.CMS 收集器
		
			Concurrent Mark Sweep 收集器是一种以获得最短回收停顿事件为目标的收集器，也称为并发低停顿收集器或低
			延迟垃圾收集器；。从名字也能看出使用的是标记清除算法
			
			CMS收集器的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，包括：

				初始标记（CMS initial mark） 
				仅标记一下GC Roots能直接关联到的对象，速度很快；但需要”Stop The World”；

				并发标记（CMS concurrent mark） 
				进行 GC Roots 追踪的过程；刚才产生的集合中标记出存活对象；应用程序也在运行；并不能保证可以标记出所有的存活对象；

				重新标记（CMS remark） 
				为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；需要 “Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；采用多线程并行执行来提升效率；

				并发清除（CMS concurrent sweep） 
				回收所有的垃圾对象；

			优点： 
				CMS 是一款优秀的收集器，它的主要优点在名字上已经体现出来了：并发收集、低停顿。

			缺点：
				造成 CPU 资源紧张： 
					从图中可以看到会比其他收集器多开线程

					无法处理浮动垃圾 
					由于 CMS 并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS 无法在当次收集中处理掉它们，只好留待下一次 GC 时再清理掉。这一部分垃圾就称为“浮动垃圾”。

					因此 CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。

					要是 CMS 运行期间预留的内存无法满足程序需要，就会出现一次 “Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。

					大量内存碎片 
					采用 标记—清除”算法，产生大量碎片。
			
		7.G1收集器
		
			当今收集器技术发展最前沿的成果之一，是一款面向服务端应用的垃圾收集器。
			
			可以看到和 CMS 差不多，但是 G1 的采集范围是整个堆(新生代老生代)。他把内存堆分成多个大小相等的独立区域，在
			最后的筛选回收的时候根据这些区域的回收价值和成本决定是否回收掉内存
			
四.	内存抖动

	内存频繁地分配和回收，而频繁的 GC 会导致卡顿，严重时和内存泄漏一样会导致 OOM
	
	1.抖动导致 OOM
		Dalvik 虚拟机主要使用标记清除算法，也可以选择使用拷贝算法。这取决于编译时期
			>5.0 采用了ART虚拟机，ART 有多个不同的 GC 方案，这些方案包括运行不同垃圾回收器。默认方案是 CMS，
		
		结论：不论是 Dalvik 虚拟机默认使用标记清除算法，还是 ART 虚拟机默认使用有 CMS 收集器，CMS 收集器使用的也是标记清除算法，所以都容易在内存抖动时候导致 OOM
	2.检测内存抖动
		AS中的memory 录制一段时间
		生成的 .profe 文件，分析对象个数多的，对齐优化，可以避免内存抖动
	3.优化
		1.尽量避免在循环体或者频繁调用的函数内创建对象，应该把对象创建移到循环体外。
		2. String 拼接创建大量小的对象造成的内存抖动
五.	查看可用内存
	Android应用的进程都是从一个叫做Zygote的进程fork出来的,并且每个应用android会对其进行内存限制。我们
	可以 查看 /system/build.prop 中的对应字段来查看我们 app 的最大允许申请内存
	
	代码查看内存：
	
		ActivityManager mActivityManager = (ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
		int memoryClass = mActivityManager.getMemoryClass();
		int largeMemoryClass = mActivityManager.getLargeMemoryClass();
		
			getMemoryClass()：是系统为应用分配的内存，并没有额外的扩充。

			getLargeMemoryClass() ：单个虚拟机可分配最大内存。而 Android 上的应用是带有独立虚拟机的，也
			就是每开一个应用就会打开一个独立的虚拟机。也就是说这是单个应用的最大内存

		命令行查看：
			adb shell getprop dalvik.vm.heapsize
			adb shell getprop dalvik.vm.heapgrowthlimit
			
			
		vm.heapsize：对应 getMemoryClass，
		vm.heapgrowthlimit：对应 getLargeMemoryClass，

		注：正常情况下 dvm heap 的大小是不会超过 dalvik.vm.heapgrowthlimit 的值。在 Android 开发中，如果要使用大堆，需要在 manifest 中指定 android:largeHeap 为 true，这样 dvm heap 最大可达 heapsize。

		但是作为开发者，建议不要配置 manifest 获取最大内存，这使得应用在扩展性方面有很大限制，建议优化内存已达到节省内存的目的