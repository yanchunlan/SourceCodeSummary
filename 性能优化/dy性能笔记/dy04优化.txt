一. 抖音全源码实战


    1.  硬件资源优化-内存
        flavor
        全局替换force
    2.  缓存命中优化
        1.  建立远端缓存 buildCache
        2.  负向抑制
            每个class都有classLoader,建设其变化
        3.  dexBuilder
    3.  并发优化
        最小化依赖


二. 抖音插件化架构演进之路
    2。  插件架构设计
        1。 业务拆分
        2。 业务通信
        3。 兼容性问题
        4。
    3。  研发体验优化
        1。 兼容性保障
            编译流程检查
    4。  用户体验优化
        策略优化：预加载，按需加载，精细化人群
        弹窗交互优化：弹窗引导用户使用
        成本优化：插件上传差分包


三. 通用优化探索之虚拟机优化实践
    背景介绍
        虚拟机问题
            1.  启动字节码编译耗时太长
            2。  启动gc耗时太长
            3。  启动时jit线程耗时太长
            4。  启动时线程管理耗时长
    优化思路
        1。 安装时执行热点方法编译
        2。  启动时抑制
        3。  启动时候抑制
        4。  线程池统一管理
            cpu提率
    优化案例
        1。  dex baseline profiles(google play支持)
             baseline-prof。txt文件（需要>agp7）

            vificyClass 优化
        2。  gc线程抑制

        3。  jit线程抑制

        4。  线程调度调优



四. 抖音精细化体验优化实践
    背景介绍
        首刷，流畅度，播放，存储，弱网
    重点人群优化
        低端机，泛新用户，中低活，中老年，弱网，低存储，低电量
    具体优化
        低端机
            性能分与活跃度正比关系
            核心指标：
                启动首刷，播放首帧，滑动流畅度，首刷流畅度
            次级指标
                存储，流量，网络
            优化事情：
                业务降级：启动，ui，动画，专项
                按需加载：
                延迟打散：
                资源优化：存储，磁盘，线程（针对不同核数场景抑制线程）
        泛新用户

    总结与展望

五. 抖音稳定性通用优化框架及工具体系建设
    背景介绍

    通用框架
        系统原生缺陷
            dalvik虚拟机死锁导致的崩溃
        系统能力优化
            pthread key扩容，native bitmap,线程栈减半
        frameWork缺陷
            某机型广播注册限制500个
    工具体系
        fd double close检测工具
        线程栈泄露检测工具
    未来展望
        MR静态分享，MR启动测试，MR覆盖率测试，自动化测试，Fuzz测试，MTE测试，线下内存防裂化，时间穿梭测试
