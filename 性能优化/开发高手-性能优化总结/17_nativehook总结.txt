一.分类
	GOT/PLT Hook ，Trap Hook ，Inline Hook
	1.	GOT/PLT Hook
		替换某个 SO 的外部调用，通过将外部函数调用跳转成我们的目标函数
		1>	ELF 格式
			.plt。该节保存过程链接表（Procedure Linkage Table）。
			.got。该节保存着全局的偏移量表。
		2>	链接过程
		3>	GOT/PLT Hook 实践
			1.	微信 Matrix 开源库的ELF Hook，它使用的是 GOT Hook，主要使用它来做性能监控。
			2.	爱奇艺开源的的xHook，它使用的也是 GOT Hook。
			3.	Facebook 的PLT Hook。
	2.	Trap Hook
		函数内部的 Hook,在目标函数前断住程序，修改内存、程序段，继续执行
		1>	ptrace(断点调试):
			ptrace 提供了一种让一个程序（tracer）观察或者控制另一个程序（tracee）执行流程，
		以及修改被控制程序内存和寄存器的方法，主要用于实现调试断点和系统调用跟踪
		2>	如何 Hook
			主动 raise signal，然后使用 signal handler 来实现类似的 Hook 效果
		3>	Trap Hook 实践
			在“卡顿优化（下）”中, Facebook 的Profilo，就是通过定期发送 SIGPROF 信号来实现卡顿监控的
	3.	Inline Hook
		跟 Trap Hook 一样，Inline Hook 也是函数内部调用的 Hook。它直接将函数开始
		（Prologue）处的指令更替为跳转指令，使得原函数直接跳转到 Hook 的目标函数
		函数，并保留原函数的调用接口以完成后续再调用回来的目的
		1.	Inline Hook 实践
			1.	Cydia Substrate。在Chapter3中，我们就使用它来 Hook 系统的内存分配函数
			2.	adbi。支付宝在GC 抑制中使用的 Hook 框架，不过已经好几年没有更新了
二.	总结
	修复系统 Bug、线上监控 Native 内存分配
	
三.	之前所有优化中hook的总结
	inline hook 监听对象分配内存大小监控，Substrate框架（https://github.com/AndroidAdvanceWithGeektime/Chapter03），打开libart.so，针对libart.so，MSHookFunction拦截RecordAllocation函数，获取到内存的对象,做内存大小监听，对象释放等
	PLTHook 获取Atrace日志（https://github.com/AndroidAdvanceWithGeektime/Chapter06），打开libcutils.so，针对libc.so，hook_plt_method拦截write 函数，并打印log(打开函数，是因为获取对象调用Atrace的函数)
	PLTHook 获取线程创建的堆栈（https://github.com/AndroidAdvanceWithGeektime/Chapter06-plus），针对libart.so，hook_plt_method拦截pthread_create函数，(调用jave层getStack)获取堆栈并打印log
	PLTHook 获取网络请求信息（https://github.com/AndroidAdvanceWithGeektime/Chapter17），针对libc.so，hook_plt_method_all_lib拦截send/recv/sendto/recvfrom/connect函数，在connect时候，判断是inet/inet6就打印线程堆栈log
	javaHook代理对应的Service实现，完成收集Wakelock、Alarm、GPS的申请堆栈、释放信息、手机充电状态(https://github.com/simplezhli/Chapter19)
	
	拓展:
		PLTHook中hook_plt_method第一个参数是排除xxx.so,