一.	分析
	1.	背景知识
		1>	电池技术
			1.	电池容量
			2.	充电时间
			3.	寿命
			4.	安全性
		2>	电量和硬件
			硬件性能过剩，导致其消耗电量
			保证应用能有更好的体验，出现了高通的CPU Boost、微信的 Hardcode 以及各个厂商的合作通道
		3>	电量和应用程序
			Android 系统的电量计算：
				从手机中导出/system/framework/framework-res.apk文件。
				使用反编译工具（如 apktool）对导出文件framework-res.apk进行反编译。
				查看power_profile.xml文件在framework-res反编译目录路径：/res/xml/power_profile.xml。
			系统的电量消耗情况：
				adb shell dumpsys batterystats > battery.txt
				// 各个Uid的总耗电量，而且是粗略的电量计算估计。
				Estimated power use (mAh):
					Capacity: 3450, Computed drain: 501, actual drain: 552-587
					...
					Idle: 41.8
					Uid 0: 135 ( cpu=103 wake=31.5 wifi=0.346 )
					Uid u0a208: 17.8 ( cpu=17.7 wake=0.00460 wifi=0.0901 )
					Uid u0a65: 17.5 ( cpu=12.7 wake=4.11 wifi=0.436 gps=0.309 )
					...
				// reset电量统计
				adb shell dumpsys batterystats --reset
			当测试或者其他人反馈耗电问题时，bug report结合Battery Historian是最好的排查方法
	2.	Android 耗电的演进历程
		1>	野蛮生长：Pre Android 5.0
			多进程、fork native 进程以及广播拉起等各种保活盛行，导致：
				耗电与安装应用程序的数量有关
				App 耗电量与 App 使用时间无关
				电量问题排查复杂
		2>	逐步收紧：Android 5.0～Android 8.0
			5.0开启Volta 项目，改变电池续航，dumpsys batteryst统计电量数据
			6.0 清理后台应用，广播，导致问题：
				1.	省电模式不够省电
						屏幕关闭还能获取位置，网络请求
				2.	用户对应用控制力度不够
						用户不能简单的对某些应用做更加细致的电量和后台行为的控制，其实国内很多的厂商已经提前实现了
				3.	Target API 开发者响应不积极
						大部分内用用坚持不把 Target API 升级到 Oreo 以上
		3>	最严限制：Android 9.0
			Google 对电源管理引入了几个更加严格的限制
	3.	总结
		日常开发的耗电问题，怎么定位，修复的，一起讨论下
二.	优化和监控
	1.	耗电优化
		1>	什么是耗电优化
			1.	后台优化
				例如长时间获取 WakeLock、WiFi 和蓝牙的扫描
			2.	符合系统的规则，让系统认为你耗电是正常的
				Android 系统目前比较关心后台 Alarm 唤醒、后台网络、后台 WiFi 扫描以及部分长时间 WakeLock 阻止系统后台休眠
		2>	优化难点
			1.	缺乏现场，无法复现
			2.	信息不全，难以定位
			3.	无法评估结果
		3>	优化方法
			可能耗电原因：
				1.	某个需求场景
					推送，保活等
				2.	代码的 Bug
					GPS 没有关闭、WakeLock 没有释放
			优化思路：
				1.	找到需求场景的替代方案
					定时推送，使用foreground service 或者引导用户加入白名单，
					《Android 后台调度任务与省电》（https://blog.dreamtobe.cn/2016/08/15/android_scheduler_and_battery/）
				2.	符合 Android 规则
					耗电监控是未充电在监控，我们需在充电可以做耗电工作
					适配最新的api,因为高版本有耗电的限制
						IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
						Intent batteryStatus = context.registerReceiver(null, ifilter);

						//获取用户是否在充电的状态或者已经充满电了
						int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);
						boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING || status == BatteryManager.BATTERY_STATUS_FULL;
				3.	异常情况监控
					后台网络、Alarm 以及 JobSheduler 事件出现异常，需要做类似Android Vitals的监控
	2.	耗电监控
		1>	Android Vitals
			1.	监控方案与规则
				Alarm Manager wakeup 唤醒过多(https://developer.android.com/topic/performance/vitals/wakeup)
				频繁使用局部唤醒锁(https://developer.android.google.cn/topic/performance/vitals/wakelock)
				后台网络使用量过高(https://developer.android.com/topic/performance/vitals/bg-network-usage)
				后台 WiFi scans 过多(https://developer.android.com/topic/performance/vitals/bg-wifi)
				Vitals 以每小时超过 10 次作为规则,很麻烦，跟 Battery Historian 一样，只能拿到 wakeup 标记组件，拿不到手机是否充电、剩余电量
		2>	监控什么
			1.	监控信息
				后台耗电监控为主，如Alarm wakeup、WakeLock、WiFi scans、Network监控，GPS，Sensor等
			2.	现场信息
				完整的堆栈信息，具体代码操作了什么，手机状态前后台时间、CPU 状态
			3.	提炼规则
				不同监控的事项或者参数都不一样
		3>	如何监控耗电
			1.	Java Hook
				1>	WakeLock
					WakeLock 用来阻止 CPU、屏幕甚至是键盘的休眠。类似 Alarm、JobService 也会申请 WakeLock 来完成后台 CPU 操作
					
					// 代理PowerManagerService
					ProxyHook().proxyHook(context.getSystemService(Context.POWER_SERVICE), "mService", this)；

					@Override
					public void beforeInvoke(Method method, Object[] args) {
						// 申请Wakelock
						if (method.getName().equals("acquireWakeLock")) {
							if (isAppBackground()) {
								// 应用后台逻辑，获取应用堆栈等等     
							 } else {
								// 应用前台逻辑，获取应用堆栈等等
							 }
						// 释放Wakelock
						} else if (method.getName().equals("releaseWakeLock")) {
						   // 释放的逻辑    
						}
					}
				2>	Alarm
					Alarm 用来做一些定时的重复任务

					// 代理AlarmManagerService
					new ProxyHook().proxyHook(context.getSystemService
					(Context.ALARM_SERVICE), "mService", this)；

					public void beforeInvoke(Method method, Object[] args) {
						// 设置Alarm
						if (method.getName().equals("set")) {
							// 不同版本参数类型的适配，获取应用堆栈等等
						// 清除Alarm
						} else if (method.getName().equals("remove")) {
							// 清除的逻辑
						}
					}
				3>	其他
					后台 CPU,使用卡顿监控
					后台网络,使用网络监控
					GPS,Hook 代理LOCATION_SERVICE
					Sensor,Hook SENSOR_SERVICE中的“mSensorListeners”
				通过 Hook，我们可以在申请资源的时候将堆栈信息保存起来。当我们触发某个规则上报问题的时候，
				可以将收集到的堆栈信息、电池是否充电、CPU 信息、应用前后台时间等辅助信息也一起带上
			2.	插桩
				1>	第一个思路是基础类，添加监控
					public class WakelockMetrics {
						// Wakelock 申请
						public void acquire(PowerManager.WakeLock wakelock) {
							wakeLock.acquire();
							// 在这里增加Wakelock 申请监控逻辑
						}
						// Wakelock 释放
						public void release(PowerManager.WakeLock wakelock, int flags) {
							wakelock.release();
							// 在这里增加Wakelock 释放监控逻辑
						}
					}
				2>	Facebook的 Battery-Metrics (https://github.com/facebookincubator/Battery-Metrics)
					监控Alarm、WakeLock、Camera、CPU、Network 等，而且也有收集电量充电状态、电量水平等信息，原理是插桩来动态替换
				插桩缺点：系统的代码插桩方案是无法替换的，例如 JobService 申请 PARTIAL_WAKE_LOCK 的场景
	3.	总结
	Java Hook 实现 Alarm、WakeLock 和 GPS 的耗电监控