git init 初始化
git add fileName 
git add -A .
git commit -m "XXXX"
git re flieNeme       ( rm flieName)

使用ls -al查询代码仓库

log信息
git log 
git log --pretty=oneline
git reflog 

回退
git reset --hard HEAD^ (or 版本号部分)       

git checkout --file    (可以从暂存区回复过来)
git reset HEAD file  


创建SSH Key
$ ssh-keygen -t rsa -C "907740329@qq.com" 

全局的配置
$ git config --global user.name "yanchunlan"
$ git config --global user.email "907740329@qq.com"

添加一个远程仓库 (通过ssh方式)
$ git remote add origin git@github.com:yanchunlan/xxx.git 
$ git remote remove origin

$ git push -u origin master  // 将本地的master分支推送到远程的master分支中
$ git push -u origin dev    // 本地切换到dev分支然后将本地的dev分支推送到远程
$ git push -f origin master // 强制推送本地到远程




git branch  查看分支

git branch ***   创建分支

git checkout ****   切换分支

git checkout -b ***   创建+切换分支

git merge *** 合并分支到当前分支

git merge --no-ff -m "merge with no-ff" dev   普通方式合并分支

git branch -d *** 删除分支（合并之后才能删除，不然就只能强行删除 -d变成-D）


长度相同的不能够合并分支  
  git log --graph --pretty=oneline --abbrev-commit 查看分支情况


（首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。）
 


git stash  存储现场

git stash apply 恢复现场 
 
git stash drop 删除现场 

git stash pop 恢复+删除现场

git  stash list 查看存储的现场信息

（修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

开发一个新feature，最好新建一个分支；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。）



git remote 查看远程库信息

git remote -v 显示远程库更详细的信息

git push origin dev (master) 推送分支 


git push origin branch-name 本地推送分支到远程

git pull  本地的和远程的合并
git branch --set-upstream branch-name origin/branch-name  本地分支和远程分支建立连接




git tag ***  打标签    

git tag *** (-s  -a **  -m **  ) XXX 打标签到  (-s PGP签名  -a 标签名 -m标签说明 XXX 为commmitID)

git tag 显示标签

git show *** 查看标签




git tag -d ** 删除标签

git tag push origin ** 推送标签到远程 

git tag push origin --tags 推送全部到远程


git push origin :refs/tags/** 删除远程标签



git config --global core.quotepath false  解决git中文显示是数字


git rebase 总结：
	1.	合并多次提交记录
		
	2.	分支合并（实质上是把当前分支暂存，然后把target分支代码同步当前在恢复当前分支暂存代码）

	git rebase -i HEAD~4 rebase最近四次提交

	git rebase --continue rebase继续

	git rebase ―abort 停止rebase,并分支回到rebase开始前的状态
	

git cherry-pick 总结：
	1.	git cherry-pick A 转移一个提交（分支名/提交名）
	2.	git cherry-pick A..B 转移多个提交

git squash (多个提交合并为一个)总结：
	1.	git rebase -i HEAD~3 ，执行需要合并之前的是哪一个
	2.	第一个是pick,第二个及其之后为s/squash,wq保存
	3.	输入一个message信息，wq保存

git clone --recursive --depth 1 xxx.git 克隆大项目，使用该命令
	--recursive 包含子项目
	--depth 1 克隆深度，仅最近的一次提交
		git fetch --unshallow 取消最近的1次提交
		
		// 克隆远程一次分支
		git remote set-branches origin 'remote_branch_name'
		git fetch --depth 1 origin remote_branch_name
		git checkout remote_branch_name

git submodule 【分为多个git仓库，提交代码分别在不同的仓库】
	add:
	git submodule add -b master git@git.xxx:xxx/xxx.git src/xxx
	
	remove:
	1、删除子仓库文件 （rm -rf [子模块path]）
	2、删除.gitmodules里面相关部分 (vim .gitmodule 或者 rm .gitmodule）
	3、删除.git/modules/子模块 （rm -rf .git/modules/子模块）
	4、删除.git/config记录到子模块的部分（vim .git/config）
	5、把自动commit的部分返回来 （git reset head~0）
	
	update:
	git submodule init
	git submodule update

	update:
	git submodule update --remote

	修改分支：
	.gitmodules文件修改绑定的分支
	git submodule update --remote

git subtree 【分为1个git仓库，提交代码在本地，但是也支持远程拉取，提交代码】
	git subtree add --prefix=src/xxx git@git.xxx:xxx/xxx.git master

	git subtree pull --prefix=src/xxx git@git.xxx:xxx/xxx.git master

	git subtree push --prefix=src/xxx git@git.xxx:xxx/xxx.git master

git 关联多个仓库
	git remote -v
	git remote add coding.net git@git.coding.net:ycl/ycl.github.io.git
	
	git push origin master
	git push coding.net master

	git pull origin master
	git pull coding.net master
	
	或者直接设置url,后续正常使用即可
	git remote set-url --add origin git@git.coding.net:KeithNull/keithnull.github.io.git
