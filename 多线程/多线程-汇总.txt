1.	线程基础
	thread，Runnable的区别
	
2.	多线程之间共享数据
	threadLocal ：多个类在同一个线程中共享同一份数据
	
3.	线程的原子性操作类
	AtomicBoolean，AtomicXXXX
	
4.	初始线程池
	new thread 缺点：
		每次new Thread新建对象性能差。
		线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。
		缺乏更多功能，如定时执行、定期执行、线程中断。
	线程池优点：
		重用存在的线程，减少对象创建、消亡的开销，性能佳。
		可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。
		提供定时执行、定期执行、单线程、并发数控制等功能。
		
	newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
	newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。
	newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
	newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。

5.	Callable、Future 和FutureTask
	线程无法获取结果，通过Callable和Future，在任务执行完毕之后得到任务执行结果
	Future是一个接口，无法直接用来创建对象，所以就存在了FutureTask了，FutureTask是Future接口的一个唯一实现类
	使用：
		ExecutorService es = Executors.newSingleThreadExecutor();
		Callable call=new Callable{xxxx}
		
		// 1 第一种
		Future<Integer> future = es.submit(call);
		
		// 2 第二种  实际第一种内部也是使用的第二种
		 FutureTask<Integer> futureTask = new FutureTask<>(call);
		Future<Integer> future = es.submit(futureTask);
		
		es.shutdown();
		...
		future.get()	----- > （获取结果）
	callable与future区别：在于一个是返回值一个是传入的参数

6.	CompletionService
	CompletionService的一个实现是ExecutorCompletionService，它是Executor和BlockingQueue功能的融合体，Executor完成计算任务，
	BlockingQueue负责保存异步任务的执行结果
	在执行大量相互独立和同构的任务时，可以使用CompletionService，可以为任务的执行设置时限，主要是通过BlockingQueue的poll(long time,TimeUnit unit)
	为任务执行结果的取得限制时间，如果没有完成就取消任务

7.	lock
	1>	synchronized 
		释放的2种情况：
			1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有；
			2）线程执行发生异常，此时JVM会让线程自动释放锁。
		如果读写文件，读读文件不冲突，读写，写写冲突，就实现不了了。如果用synch,就要等它执行完，很麻烦
	2>	lock
		1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；
		2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执
		行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象
		
		a>ReentrantLock
			 Lock lock = new ReentrantLock();
			 lock.lock();
			 lock.unlock();
		b>ReentrantReadWriteLock
			它表示两个锁，一个是读操作相关的锁，称为共享锁；一个是写相关的锁，称为排他锁
			（1）公平选择性：支持非公平（默认）和公平的锁获取方式，吞吐量还是非公平优于公平。
			（2）重进入：读锁和写锁都支持线程重进入。
			（3）锁降级：遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级成为读锁。
			
			 ReadWriteLock rwl = new ReentrantReadWriteLock();
			 rwl.readLock().lock();
			 rwl.readLock().unlock();
			 
			 rwl.writeLock().lock();
			 rwl.writeLock().unlock();
	3>	锁的相关概念
		1）可重入锁
		synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配
		2）可中断锁
		synchronized就不是可中断锁，而Lock是可中断锁
		lockInterruptibly 就是可以中断锁的用法
		3）公平锁
		请求锁的顺序来获取锁,synchronized是非公平锁,ReentrantLock和ReentrantReadWriteLock，默认是非公平锁，但可以设置为公平锁,
		其中都实现了FairSync extends Sync，NonfairSync extends Sync公平锁，非公平锁。
	4>	源码
		主要继承AbstractQueuedSynchronizer，内部有一个node head,node tail,和一个ConditionObject 等待队列，其中当wait之后,线程
		加入等待队列，当signal后，从等待队列移到同步队列，继续竞争，其中node 分别是同步队列的头尾，方便竞争的时候增删。		
8.	条件对象Condition
	Condition的await，signal，signalAll，对应Object的wait,notify,notifyAll，不过object捆绑synchronized，
	Condition与互斥锁/共享锁捆绑使用的
	原理：
		内部有一个同步队列，等待队列，等待就加入等待队列，释放就加入同步队列
	注意：signal 唤醒一个，signalAll唤醒所有，实际上signal比较危险，一次只解除一个线程状态，其他线程容易导致死锁
	案例：
		1>生产者，消费者模式，实质上是生产，消费2个线程，lock锁住代码，其中使用了2个condication分别控制生产，消费
		2>3个线程，依次打印ABC，使用一个lock,3个condition解决，当A执行就B.signal,当b执行就csignal，xxxx

### 同步工具类 start ###
9.	Semaphore 信号量
	信号量维护了一个许可集，我们在初始化Semaphore时需要为这个许可集传入一个数量值，该数量值代表同一时间能访问共享资
	源的线程数量。线程可以通过acquire()方法获取到一个许可，然后对共享资源进行操作，注意如果许可集已分配完了，那么线
	程将进入等待状态，直到其他线程释放许可才有机会再获取许可，线程释放一个许可通过release()方法完成

	acquire 阻塞，直到有许可证可以获得，然后拿到许可，release方法增加一个许可证，这可能会释放一个阻塞的acquire方法
	Semaphore是信号量，用于管理一组资源。其内部是基于AQS的共享模式，AQS的状态表示许可证的数量，在许可证数量不够时，线程将会被挂起；而一旦
	有一个线程释放一个资源，那么就有可能重新唤醒等待队列中的线程继续执行
	
	acquire:获取一个许可
	acquire(int n):获取n个许可
	release:释放一个许可
	release(int n):释放n个许可

	AQS中通过state值来控制对共享资源访问的线程数，每当线程请求同步状态成功，state值将会减1，如果超过限制数量的线程将被封
	装共享模式的Node结点加入同步队列等待，直到其他执行线程释放同步状态，才有机会获得执行权，而每个线程执行完成任务释放同
	步状态后，state值将会增加1，这就是共享锁的基本实现模型。至于公平锁与非公平锁的不同之处在于公平锁会在线程请求同步状态
	前，判断同步队列是否存在Node，如果存在就将请求线程封装成Node结点加入同步队列，从而保证每个线程获取同步状态都是先到先
	得的顺序执行的。非公平锁则是通过竞争的方式获取，不管同步队列是否存在Node结点，只有通过竞争获取就可以获取线程执行权

10.	CyclicBarrier
	它允许一组线程互相等待，直到达到某个公共屏障点（先让组内执行再等待全部执行后，再继续执行）
	
	可重用
	底层是使用ReentrantLock和Condition实现的
	总结：
		1.CyclicBarrier可以用于多线程计算数据，最后合并计算结果的应用场景。
		2.这个等待的await方法，其实是使用ReentrantLock和Condition控制实现的。
		3.CyclicBarrier可以重复使用。
		
11.	CountDownLatch
	同步工具类，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。
	例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有框架服务之后执行
	
	await:	如果当前count大于0,当前线程将会wait,直到count等于0或者中断
	oolean await:使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间
	countDown： 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。
	getCount：获得计数的数量
	
	CountDownLatch和CyclicBarrier区别:
		CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：
		CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才执行；
		CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；
		CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。

12.	Exchange
	第一个线程先执行exchange 方法，它等待第二个线程也执行exchange，当两个线程都到达同步点时，这两个线程就可以交换数据
	
	String exchange(V x):用于交换，启动交换并等待另一个线程调用exchange
	String exchange(V x,long timeout,TimeUnit unit)：用于交换，启动交换并等待另一个线程
	调用exchange，并且设置最大等待时间，当等待时间超过timeout便停止等待
### 同步工具类 end ###

13.	自定义线程池
	主要是线程与队列的结合
14.	读写锁分离模式（读，写的锁的定义）
15. feature设计模式（返回线程池的结果）
15. Guarded Suspension设计模式
		Request：表示客户端请求
		RequestQueue：用于保存客户端请求队列
		ClientThread：客户端进程
		ServerThread：服务器进程
16. 使用ThreadLocal重新设计一个上下文设计模式
	防止对象多次被new
17. Producer and Consumer设计模式
18. 两阶段终止模式(Two-Phase Termination Patter)
	主要是线程使用标识控制不再执行，并调用线程的interrupt
19.	Worker Thread模式
	主要是一边生产，一边消费