一. dart特性
	1. jit和Aot
	运行时JIT即时编译，发版时AOT提前编译
	2. 内存分配和垃圾回收
	创建对象等于堆上移动指针，线性增长，不需要查找内存
	多生代回收，半空间机制，半个空间活跃的对象拷贝备用空间，然后释放当前所有空间内存
	3. 单线程模型
	没有抢占，没有锁，执有ISOlate,彼此之间不共享内存，通过looper发送消息通讯
二.	dart语言
	一切都是对象
	1. 基本类型
		num:int ,double
		bool
		String
	2. 集合
		list
		map
	3. 常量
		const 编译时
		final 运行时
	4. 函数
		{} 可选命名函数
		void method1({bool a,bool b=false})
		[] 可选参数
		void method1(bool a,[bool b=false])

		_method 函数前添加_代表私有函数 
 	5. 类
 		构造函数
 		class point{
 			Point(this.x,this.y)
 			Point(this.x,this.y):z=0;
 		}
 		继承 extend
 		接口 implements
 		复用 with
	6. 运算符
		?. 防止为null
		??= 等于null就赋值，不为null不赋值
		？？ 不等于null就赋值，就返回原值，等于三元运算符？：
三.	Flutter 原理
	1. 分层
		embedder: 操作系统适配层，surface设置，线程设置，平台插件等平台相关特性的适配
		engine：skia,dart,text,实现了flutter的渲染引擎，文字排版，事件处理，dart运行时功能
		framework：UI sdk，包含动画，图形绘制，手势识别等
	2. 绘制原理
		布局
			深度优先遍历渲染对象树，父对象控件逻辑决定子对象控件逻辑
			【flutter引入的一个优化】布局边界：relayout boundary 只布局自己跟子节点，不影响到外部
		绘制
			深度优先的方式，（前序遍历）绘制自己再绘制子节点
			【flutter引入的一个优化】重绘边界：repaint boundary 只绘制自己跟子节点，不绘制外部
		合成
			根据大小，层级，透明度等计算最终实际图层，相同图层合并简化图层
		渲染
			图层数据 -> skia -> 二维图像数据 -> GPU渲染
四.	flutter语言
	一切都是weight
	1. weight
		weight，element，renderObject，renderObjectWeight
		流程：
			1. 先遍历weight,调用renderObjectWeight中createElement -> 创建element
			2. 调用element（子类renderObjectElement）的mount  -> 创建renderObject
			3. 插入渲染树
		改变：
			weight改变，weight的element标记dirty,等待下一个vsync，触发element更新，并使用最新的weight数据更新自身以及关联的renderObject对象，其中后面的绘制与摆放都是renderObject控制
			abstruct class renderObject xx{
			void layout()
			void paint()
			}
	2. state
		stateLessWeight： 初始化参数控制显示 ， text源码
		stateFulWeight:	 响应变化，重新build， Image源码
	3. 生命周期
		state生命周期：
			创建：start -> 构造方法 -> initState -> didchangeDependencies -> build
			更新：setState / didchangeDependencies（state变化） / didUpdateWidget（weight变化调用） ->
			销毁：tree -> deactivate -> dispose -> end
		app生命周期：
			widgetBIndingObserver类具备很多接口回调
			resumed -> inactive -> paused : 前后台切换中间必定经过inactive
		帧回调：
			widgetsBinding.addPostFrameCallback : 回调一次
			widgetsBinding.addPersistentFrameCallback: 回调多次
	4. 基础控件
		1. 文字
			布局：
				textalign 布局对齐
				textdirection 排版方向
				maxlines 最大行
				overflow 文本截断
			样式:
				fontFamily 字体名称
				fontSize 字体大小
				color 字体颜色
				shadows 字体阴影
			text 单文字
			textSpan 分片
		2. 图片
			Image
			FadeInImage 支持占位，动画(需要添加transparent_image依赖)
			cachedNetworkImage 支持磁盘缓存

				fit 对其规则
				BoxFit.contain/scaleDown/contain/none
		3. 按钮
			floatingActionButton  圆形按钮
			FlatButton  扁平按钮
			RaisedButton  凸起按钮
				shape
					BeveledRectangleBorder 带斜角的长方形边框
					RoundedRectangleBorder 圆角矩形
					StadiumBorder 两端是半圆的边框
					CircleBorder 圆形
						side 用来设置边线（颜色，宽度等）
						borderRadius 用来设置圆角
				enable/disable 通过onPressed是否为null决定
		4. 列表
			ListView
				listTitle 小组件单元
			ListView.Builder 适用于子weight较多的情况
				itemCount 元素个数
				itemExtent 列表高度
			ListView.separated 设置分割线，与ListView.Builder类似

			CustomScrollView 处理多个滚动效果的weight
				AppBar -> SliverAppBar
							floating 设置悬浮样式
							flexibleSpace 悬浮背景
				ListView -> SliverList
							delegate -> SliverChildBuilderDelegate 列表项
			ScrollController
				具体添加位置在：ListView.builder(
					controller: ->
				)
				addListener
				dispose
			ScrollNotification
				具体添加位置在：child: ListView.builder
				scrollStartNotification
				scrollUpdateNotification
				scrollEndNotification
	5. 容器控件
		1. 单子weight布局
			container
				padding
				margin
			padding 单独设置一个内边距
			center 居中
			transform 旋转规则
			decoration 边框
			constraints 基本属性，设置宽高颜色等
		2. 多子weight布局
			Row 水平，行排列
			Column 垂直，列排列
			Expanded 剩余补全
				flex 分配比例

			对齐规则：
				mainAxisAlignment 横向
					start/center/end/spaceEvenly（固定间距对齐）/spaceBetween（前后到底）/spaceAround（均分）
				crossAxisAlignment 纵向
			对齐负责：
				mainAxisSize 对齐规则
					min -> 等效wrap_content
					max -> 等效于match_parent
		3. 层叠weight布局
			stack 层叠布局
				positioned 设置子weight位置的
				PositionedDirectional 是Positioned.directional封装的，所以方向是系统默认方向
	6. 组合和自绘
		组合 拆解布局然后定义为一个组件
		自绘
			xx extend customPaint{
				paint(canvas){
					drawLine
					drawRect
					drawPoint
					drawPath
					drawCircle
					drawArc
				}
			}
	7. 夜间模式
		主要是themeData控制
			brightness 明暗模式
			primaryColor 主色调
			accentColor 次色调
			fontFamily 文本字体
			cursorColor 光标颜色
		全局主题：MaterialApp控制
		局部主题：
			Theme(data:ThemeData(iconThemedata)) // 新建一个主题
			Theme(data:Theme.of(context).copyWith(x)) // 更新部分主题, theme.of(Context) 获取到上层weight的theme
		分平台定制主题
			TargetPlatform.ios? iosTheme :AndroidTheme
	8. 依赖管理
		pubspec.yaml 职责：主要是管理资源和依赖，比如第三方库，dart运行环境，flutter sdk版本等
		资源管理
			资源放入目录：assets
			声明在配置文件中
			flutter:
				assets:
					- assets/
					- assets/icons
			加载方式： rootBundle.load(二进制文件)/loadString(字符串资源)

			如果是有几倍图的情况：
			资源目录：
			assets
				back.jpg
				2.0x - back.jpg
			声明1倍图资源就可，flutter会自动去加载分辨率最近的资源
		字体
			资源放入目录：assets/fonts
			声明
				fonts:
					- family:xxx
					  font:
					   - assets:asset/fonts/xx
					   style:xx
					   wight:100
		原生平台的资源，直接去修改原生代码目录即可

	9. 事件
		1. 原始指针事件
			Listener（
			onPointerDown：
			onPointerMove：
			onPointerUp
			）
		2. 手势事件
			GestureDetector（
			onTap：
			onDoubleTap：
			onLongPress：
			onPanUpdate： // 拖动回调
			）
		3. 父子手势拦截 RawGestureDetector
		eg:【让父控件也能获取到手势】
			MultipleTapGestureRecognizer extends TapGestureRecognizer{
				rejectGesture()
			}
			RawGestureDetector(//自己构造父Widget的手势识别映射关系
 		 	gestures: {
  		  	//建立多手势识别器与手势识别工厂类的映射关系，从而返回可以响应该手势的recognizer
				MultipleTapGestureRecognizer: GestureRecognizerFactoryWithHandlers<
			   	 MultipleTapGestureRecognizer>(
			     	 () => MultipleTapGestureRecognizer(),
			     	 (MultipleTapGestureRecognizer instance) {
   		   	  instance.onTap = () => print('parent tapped ');//点击回调
  		   	 },
  		 	 )
 			 },
  			child：xxx(
			GestureDetector:xxx
			)
 			 ),
			);
	10. 数据交互
		InheritedWidget【父控件到子控件】
			子类继承InheritedWidget，实现updateShouldNotify，并提供of方法，
			可以达到类似Theme.of，通过主题子控件获取到父控件属性

		Notification
			父控件NotificationListener包裹，子控件使用 继承Notification的子类方法.dispatch分发

		EventBus
			eventBus.on().listen((event) { setState(() {
			xxx
			});

			eventBus.fire(xxx)
	11. 路由跳转
		主要由Route和navigator管理，其中路由的管理分为2种方式：
		1. 基本路由
			Navigator.push(xxx, MaterialPageRoute(builder: (context) => xxx()); // 跳转
			Navigator.pop(context) // 回退

		2. 命名路由
			MaterialApp(
				routes:{ "aaa":(context)=>xx(), },
				onUnknownRoute： //错误路由处理
			); // MaterialApp注册路由
			Navigator.pushNamed(context,"aaa"); // 跳转

			Navigator.of(context).pushNamed("aaa", arguments: "xx"); // 跳转传参
			String xx = ModalRoute.of(context).settings.arguments as String; // 获取参数

			Navigator.pushNamed(context, "aaa",arguments: "xx").then((msg)=>setState(()=>_msg=msg)) // 跳转监听返回
			Navigator.pop(context,"xx") // 返回传参
五.	flutter进阶
	1. 动画
		1> 单页面动画
		动画的创建：
			Animation： 提供动画数据/状态（比如，动画是否开始、停止、前进或者后退，以及动画的当前值），而不负责动画的渲染
			AnimationController： 管理 Animation，可以用来设置动画的时长、启动动画、暂停动画、反转动画等
				vsync: 绑定动画到指定控件，跟随控件一起显示隐藏
			Listener： 是 Animation 的回调函数，用来监听动画的进度变化，根据这个回调函数，根据动画的当前值重新渲染组件，实现动画的渲染
				EG:
				controller = AnimationController( vsync: this, duration: const Duration(milliseconds: 1000));
				animation = Tween(begin: 50.0, end: 200.0).animate(controller)
				..addListener(() {
					setState(() {}); //刷新界面
				});

		动画的开始：
			controller.forward()
		动画的销毁：
			controller.dispose();
		动画的值获取：
			animation.value
		动画的曲线效果：
			CurvedAnimation：提供了很多常用的曲线，比如震荡曲线，Curves.elasticOut
				EG:
				final CurvedAnimation curve = CurvedAnimation(parent: controller, curve: Curves.elasticOut);
				Tween(begin: 50.0, end: 200.0).animate(curve)
		动画的重复执行：
			方式一
			controller.repeat(reverse: true);
			方式二
			animation.addStatusListener((status) {
				if (status == AnimationStatus.completed) {
					controller.reverse();//动画结束时反向执行
				} else if (status == AnimationStatus.dismissed) {
					controller.forward();//动画反向执行完毕时，重新执行
				}});
			controller.forward();

		AnimatedWidget：包含setState刷新，关闭等逻辑
		AnimatedBuilder：仅管理动画变化，渲染由外部传入的child
		2> 过渡动画 Hero
			Hero(
				tag: 'hero', //设置共享tag
				child:
			）
	2. 单线程模型
		event Loop机制
			dart是单线程的，与异步并不冲突，通过event Loop交互
		异步任务 （Future）
			有2个队列，一个事件队列Event Queue，一个微任务队列Microtask Queue,执行顺序：微任务队列 -> 事件队列
			微任务队列：手势识别，文本输入，滚动视图，保持页面效果等
			事件队列：io,绘制，定时器等

			then与Future公用一个事件循环，执行顺序： 事件对垒 -> then事件
		异步函数
			如果调用需要同步等待，则:
			async{
				(await futurex()) // futurex为future函数
			}
		多线程并发 (ioslate)
			Isolate.spawn(fun(),"msg") 执行一个并发任务

			并发任务之间的消息通讯，需要使用ReceivePort来解决
			并发计算任务可以采用 compute函数执行
				swait compute(funx(),value)
	3. http网络编程与json解析
		1. http网络编程
			httpClient(dart:io)
				async{
					httpClient=new httpClient
					httpClient.idleTimeout // 超时
					request=await httpClient.getUrl() // 设置url
					response=await request.close // 发送请求
					if(response.statusCode==HttpStatus.ok) // 收到响应
				}
				所有的请求使用Future包装async外包装，请求位置若需要同步等待，则使用swait。
			http（dart原生）
				dependencies{
					http : '>=0.11.3+12'
				}
				saync{
					client=new http.client
					response=swait client.get(url,header) // 设置url并请求
					if(response.statusCode==HttpStatus.ok) // 收到响应
					{
						response.body
					}
				}
			dio(三方库)
				dependencies{
					dio : '>2.1.3'
				}
				saync{
					dio=new dio
					response=swait dio.get(url,options) // 设置url并请求
					if(response.statusCode==HttpStatus.ok) // 收到响应
					{
						response.date.toString
					}
					// 上传文件
					formData=FormData.from()
					response=swait dio.post(url,formData)
					// 下载文件
					dio.download(url,"x.zip")
					// 多请求
					List<response> response=Future.wait()[dio.get,dio.get]
					// 拦截器
					dio.interceptors.add()
					// 异常捕获
					try{
					response=swait dio.get(url,options)
					}catch(e)
				}
		2. Json解析
			添加插件：FlutterJsonBeanFactory
			添加依赖：
			dependencies:
  				dio: ^3.0.10
  				json_annotation: ^3.1.0
			dev_dependencies:
				json_serializable: ^3.5.0
 			 	build_runner: ^1.0.0
			使用命令： flutter packages pub run build_runner build
			使用代码：
			json.decode("json") // 返回Map<String,dynamic>类型

		3. 异步加载
			在数据量计算很大的情况下，可使用isolate优化，如下：
			单线程使用：
				compute（funx(),"json"）.then(print(xx))
			compute加载的方法需要是静态的，否则报错isolate message，
			多线程使用：
				receivePort 自行传递消息

	4. 本地存储与数据库
		1. 文件
			目录有2个：
				1. temporaryDirectory 等效于cacheDir
				2. Documentirectory 等效于appData
			async{
				dir=await getApplicationDocumentirectory() //	获取文件目录
				file(dir/xxx.txt).writeAsString	// 写
				file(dir/xxx.txt).readAsString	// 读
			}
		2. sharedPreferences
			async{
				preference=await getSharepreference.getInstance()
				preference.getInt('x')
				preference.setInt('x')
			}
		3. 数据库
			async{
				db=await openDatabase(join(await getDataBasePath,"x.db"),
					onCreate: => db.execute
					onUpdate =>
					version:1
				)
				await db.insert('x',"xx",conflictAlgorithm:ConflictAlgorithm.replace) // 插入
				List list=await db.query('x'）
				db.close
			}
	5. 兼容android/ios平台
		调用底层方法主要依赖于method channel
		1. method channel [flutter控制原生响应]
		flutter:
		const platform = MethodChannel('');
		fun() async{
			try{
				result= await platform.invorkMethod('') 
				或者 result= await platform.invorkMethod('').then((dynamic? value){});
			}catch(e){}
		}
		原生侧：
		new MethodChannel(flutterEngine?.dartExecutor,'').setMethodCallHandler{
			onMethodCall(){
				call.method.equals(''){
					result.success/error/notImplemented
				}
			}
		}
		2. 安卓的view显示在flutter中
		原生侧:
		viewFactory extends platformViewFactory{
			platformView create 
		}
		viewControl implements platformView{
			getview
			dispose
		}
		Register register =ShimPluginRegistry(flutterEngine!!).registarFor('')
		viewFactory factory=new ViewFactory(register.messenger())
		register.platformViewRegistry().registerViewFactory('', factory)
		
		如果想动态的调整，就需要参数传递  [flutter控制原生响应]
		通过method channel的方式传递数据
		flutter:
			build{
			child:
				if (defaultTargetPlatform == TargetPlatform.android) {
	  			  	return AndroidView(viewType: '',
							onPlatformViewCreated: _channel = MethodChannel(),);
					} else {
				 	 return UiKitView(viewType: '',
					   	 onPlatformViewCreated: _channel = MethodChannel(),);
  				}
			}
			
			onPress(){
				_channel.invokeMethod('changeBackgroundColor')
			}
		
	6. 混编flutter工程
		1>	集成flutter【flutter作为原生的aar工程】
			flutter库结构:
				Framework 库和引擎库(icudtl.dat，libFlutter.so，class等主要封装在Flutter.jar中)
				lib 目录下的 Dart 代码（Flutter 工程产物）
					应用程序数据段 isolate_snapshot_data、
					应用程序指令段 isolate_snapshot_instr、
					虚拟机数据段 vm_snapshot_data、
					虚拟机指令段 vm_snapshot_instr、
					资源文件 Flutter_assets
			创建 Flutter module模块:
				new flutter project -> module -> finish
				Flutter create -t module flutter_library

		2>	添加flutter library【flutter的view显示在原生中】
				到module模块，打包aar, flutter build aar --debug
			添加依赖
			配置使用，setContentView(Flutter.createView(this,getLifecycle,"defaultRoute"))
			
	7. 导航栈管理【原生页面与flutter页面互相切换】
		混合导航栈
			原生：单容器单页面（一个activity对应一个原生页面）
			flutter：单容器多页面（一个activity对应多个flutter页面）
		1>	原生跳转到flutter：
			View FlutterView = Flutter.createView(this,getLifecycle,"defaultRoute");
			setContentView(FlutterView);
		2>	从 Flutter 页面跳转至原生页面：
			Flutter 页面打开新的原生页面/Flutter 页面回退到旧的原生页面
				通过MethodChannel来完成跳转
			futter内部跳转：
				通过Navigator完成跳转
		
		备注：尽量使用flutter去完成闭环的业务模块，减少flutter页面与原生页面之前循环切换的情况
		防止出现多个flutter 实列情况，每启动一个 Flutter 实例，就会创建一套新的渲染机制，即 Flutter Engine，以及底层的 Isolate。而这些实例之间的内存是不互相共享的，会带来较大的系统资源消耗
		
		解决混编中多实列问题，业界有2种解决方案：
		1. 今日头条为代表的修改 Flutter Engine 源码，使FlutterView对应的Flutter Engine能够底层共享Isolate
			修改 Flutter 源码，维护成本高，增加线程模型和内存回收异常概率，稳定性不可控
		2. 闲鱼为代表的共享 FlutterView，由原生层驱动 Flutter 层渲染内容的方案
			涉及到跨渲染引擎的 hack，Flutter 页面的新建、缓存和内存回收，低端机切换动画容易出现bug
	
	8. 状态管理
		Provider【共享数据】
		添加依赖：provider: 3.0.0+1 #provider依赖
		1. ChangeNotifier【单资源】
		xxxModel with ChangeNotifier{
			get
			set(){
				notifyListeners()
			}
		}
		使用：
			在控件的父控件套一层 ChangeNotifierProvider.value(）
		读：
			final xxx = Provider.of<xxxModel>(context);	
		写：
			final xxx = Provider.of<xxxModel>(context);
			xxx.set()
		
		缺点：
			调用get/set会所有地方的控件都刷新，为了解决此问题，引入Consumer，在每个get/set位置使用Consumer包裹
			Consumer(
				builder: (context, xxxModel xx, child) =>xxx) // 其中仅更新model,child不重建
				);
		2. MultiProvider【多资源】
		设置
			MultiProvider(providers: [
				Provider.value()
				ChangeNotifierProvider.value(value: CounterModel()) //注入计数器实例
			]
		读
			Provider.of<xxModel>(context)
			Consumer2<xxxModel,double>(
				builder: (context, xxxModel counter, double textSize, _) => 
			)
	9. 推送
		极光推送插件
		1. 初始化极光sdk
		2. 获取地址id
		3. 注册消息通知
	
	10. 多语言适配
			1. 添加flutter_intl插件
				搜索 flutter_intl ，并添加
			2. tools -> flutter_intl -> init project
			2. 添加依赖
				 flutter_localizations:
				sdk: flutter
			4. 配置MaterialApp
				MaterialApp(
    				  localizationsDelegates: const{
    				    	S.delegate,
    				   	 GlobalMaterialLocalizations.delegate,
   				   	 GlobalCupertinoLocalizations.delegate,
  				   	 GlobalWidgetsLocalizations.delegate,
  				    },
 				    supportedLocales: S.delegate.supportedLocales,
  				    onGenerateTitle: (context){
      				  	return S.current.app_title;
   				   },
   				   localeResolutionCallback : // 系统语言改变回调
   				   locale: // 设置语言的方法
   			5. 使用
   				S.current.title / S.of(context).title

	11. 分辨率适配
		适配屏幕旋转
			OrientationBuilder // OrientationBuilder的builder模式感知屏幕旋转
			MediaQuery.of(context).orientation
			SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]); //固定屏幕
		适配平板电脑【屏幕空间划分为多个窗格，类似Fragment/ChildViewController来抽象独立区块】
			if(MediaQuery.of(context).size.width > 480) { 【假设平板宽度大于 480】
 			 	//tablet
			} else {
  				//phone
			}
	12. 编译模式
		flutter的编译模式
			Debug:
				JIT 模式,支持真机/模拟器运行，打开所有的断言assert，调试信息、服务扩展和调试辅助Observatory,热重载，无优化代码执行速度、二进制包大小和部署，flutter run --debug
			Release:
				AOT 模式,只能真机运行,优化了应用快速启动、代码快速执行，以及二级制包大小,flutter run --release
			Profile:
				与 Release 模式一致,多了对 Profile 模式的服务扩展的支持，包括支持跟踪，以及一些为了最低限度支持所需要的依赖（连接 Observatory 到进程）,flutter run --profile
		编译模式的识别
			assert
			通过在不同编译环境添加的变量
		分离配置环境
			flutter run apk/ios -t lib/main_dev.dart
			flutter run apk/ios -t lib/main.dart
			或者在Edit Configurations里面配置不同的编译选项，+，flutter，dartEntryPoint

	13. hot reload原理
		热重载
			JIT：即时编译。AOT：运行前编译，可为平台生成稳定的二进制代码
			原理：jit编译器将dart代码编译成可在dart VM上的dart Kernel，而dart kernel可以动态更新
			流程：
				扫描工程改动：扫描新增，删除，改动文件
				增量编译：变化的dart代码，编译成增量的dart kernel文件
				推送更新：将dart kernel增量文件通过http发送到移动设备dart VM
				代码合并：dart kernel增量文件与原有文件合并，然后dart VM重新加载它
				widget重建：确认dart VM加载成功，flutter重置UI线程，通知flutter framework 重建widget
		不支持热重载的场景
			代码编译错误
			widget状态无法兼容
			全局变量和静态属性的修改
			main方法的修改
			initState方法的修改
			枚举和泛型的修改
			
			针对上面不支持场景的解决方式：修复问题或重启应用

	14. 优化调试效率
		输出日志
			debugPrint = (String message, {int wrapWidth}) {}; // debug环境
			debugPrint = (String message, {int wrapWidth}) => debugPrintSynchronously(message, wrapWidth: wrapWidth);// release环境
		断点调试
		布局调试
			1> 界面调试工具
			void main() {
				...
				debugPaintSizeEnabled = true; // 开启布局调试
				runApp(...)
			}
			2> Flutter Inspector
	15. 检测优化flutter性能
		性能图层
		1>	开启 flutter run --profile
		2>	分析渲染问题 Performance Overlay
			GPU线程：上面		
			UI线程：下面

			蓝色：已执行的正常帧
			绿色：当前帧
			红色：卡顿帧（小于16ms）

		3>	定位问题
			GPU线程定位：
				检查多视图叠加的视图渲染开关 checkerboardOffscreenLayers
					多视图叠加通常会用到 Canvas 里的 savaLayer，类似半透明效果
					MaterialApp{
						checkerboardOffscreenLayers: true, // 检测是否存在多视图叠加，频繁的刷新问题
					}
					优化方式：去除半透明效果，直接设置具体颜色
					
				检查缓存的图像开关 checkerboardRasterCacheImages
					图像的渲染涉及 I/O、GPU 存储，以及不同通道的数据格式转换，所以渲染过程的构建需要消耗大量资源
					MaterialApp{
						checkerboardRasterCacheImages: true, // 检测静态图像是否没有缓存，导致构建耗费资源
					}
					优化方式：缓存图像等，避免频繁刷新
					RepaintBoundary{ // flutter提供的多层次缓存快照，可以缓存静态图像，避免重复刷新
						Container(color: Colors.black, height: 10.0, width: 10.0, ),
					}
			UI线程定位：
				1. 检测：火焰图获取方式： Open DevTools -> Performance -> Record -> stop
				2. 优化：使用Isolate（或 compute）修改耗时操作
		4>	常用优化方式：
			1>	widget拆小，使其更细粒度重建和复用
			2>	不要设置半透明，使用图片代替，减少遮挡区域的绘制
			3>	列表数据懒加载，避免一次性创建所有，减少视图的初始化耗时

	16. 自动化测试
		1>	单元测试
			1>	单个测试
				添加依赖：
					dev_dependencies:
 					 test:
 				测试入口：
 					test/widget_test.dart
 				编写测试用例：
 					1> 	定义，执行，验证
 						编写测试代码，使用expect验证，前后数据是否正确
 						test包裹测试代码
 						EG:
 							test('test', (){
 								int i = 1;
 								expect(i,1); // 验证前后数据是否相等
 							});
 					2>	选择test/widget_test.dart，右键“Run ‘tests in widget_test’”，开始测试用例
 					3>	测试结果
 							测试不正确，则爆出异常
 							
			2>	针对多种测试用例的情况，使用group
					group('test group', (){
						test('test', (){
							...
						});
						test('test', (){
							...
						});
					});
 			3>	外部依赖的情况（网络）
 				添加依赖：
 					dev_dependencies:
 					 	test:
 					 	mockito:
 				编写测试用例：
 					xxx
		2>	UI测试
			添加依赖：
				dev_dependencies:
 					flutter_test:
 						sdk: flutter
			编写测试用例：
 					void main(){
 						testWidget(WidgetTester tester){
 							await tester.pumpWidget(MyApp()); // 声明并触发渲染
 							expect(find.test('0'),findsOneWidget); // 查找‘0’的widget
 							
 							await tester.tap(find.byIcon(Icons.add)); // 查找+按钮
 							await tester.pump(); // 触发渲染

 							expect(find.test('0'),findsOneWidget); // 查找‘0’的widget
 						}
 					}
 				tester还支持的行为：
 					文字输入enterText，拖动drag，长按longPress
 					
 			tester学习官方文档地址：https://api.flutter.dev/flutter/flutter_test/WidgetTester-class.html。

六.	flutter综合
	1. 异常捕获
		1> app层异常捕获
		同步异常：try{}catch(e){print(e)}
		异步异常：Future.xxx.catchError((e)=>print(e))
			同步无法捕获异常异常，如果想捕获，等待异步结果，捕获同步代码
			try{
				await Future.xxx.catchError()
			}catch ...
		2> framework异常的捕获方式
		//框架异常
   		 FlutterError.onError = (FlutterErrorDetails details) async {
			  //线上环境，走上报逻辑
	 		 if (isRelease) { // 将框架异常转发到当前的 Zone 中
	 		   Zone.current.handleUncaughtError(details.exception, details.stack);
	 		 } else {
	 		   //开发期间，走Console抛出
			    FlutterError.dumpErrorToConsole(details);
			  }
   		 };
   		 runZoned>(() async { // 全局捕获异常
		 	runApp(MyApp());
		 }, onError: (error, stackTrace) async {
		 //Do sth for error
		 });
		3> 第三方
		bugly/firebase ,仅使用其上报功能
		注意：
			配置权限
			解决Android P 默认限制 http 明文传输数据，配置network_security_config
		4> Engine层异常
		可使用bugly去捕获

	2. 线上质量指标
		页面异常率
			页面渲染过程中出现异常的概率，它统计的是页面维度下功能不可用的情况。
			
			公式如下：
				页面异常率 = 异常发生次数 / 整体页面 PV 数
				异常发生次数：在全局异常上报位统计
				整体页面 PV 数：实现NavigatorObserver.didPush监听页面打开次数
				
				MaterialApp( 
					navigatorObservers: [ MyObserver(), ], // 设置路由监听 
					home: xxx, 
				);
				
		页面帧率
			即 FPS，画面每秒传输帧数，FPS 的计算口径为单位时间内渲染的帧总数。
			
			公式如下：
				FPS=60* 实际渲染的帧数 / 本来应该在这个时间内渲染完成的帧数
				
				var orginalCallback;
				void main(){
					//设置帧回调函数并保存原始帧回调函数
					orginalCallback = window.onReportTimings;// 帧回调函数
					window.onReportTimings = onReportTimings;
					// Flutter 1.12.x 之后，SchedulerBinding.instance.addTimingsCallback(_onReportTimings);
				}
				...
				
		页面加载时长
			页面从创建到可见的时间，检测创建页面视图是否存在过度绘制，或者绘制不合理导致创建视图时间过长的情况。
			
			公式如下：
				页面加载时长 = 页面可见的时间 - 页面创建的时间
				页面可见的时间：WidgetsBinding.instance.addPostFrameCallback((_) {}
				页面创建的时间：Page构造函数调用时间为启动时间
			
				拓展：有网络的情况下：页面加载时长=页面本地渲染时长+网络加载时长
				针对不同业务场景，一般TP90超过2秒就不正常

	3. 组件化
		组件化
			原则：单一性原则，抽象化原则，稳定性原则，自完备性
		平台化
			按照业务和 UI 分解为 4 个维度，如下图：
			不具备UI属性						｜		具备UI属性
			UI控件（标签，轮播卡片）	｜		业务模块（首页，我的，设置）
			————————————————————————————
			不具备业务属性					｜		具备业务属性
			基础功能（网络，存储，		｜		基础业务功能（账号，支付）
			工具）									｜
					
			从上到下：
			业务模块（首页，设置，我的，详情）
			基础业务（账号，支付，升级）
			UI模块（公用控件，导航栏，轮播控件，富文本，标签）
			基础模块（网络，存储，工具）
		单向依赖原则：
			相比组件化，多了一个分层的概念，独立性及组建之间关系的合理性，且尽可能少单向依赖，从上到下顺序依赖，跨层/同层依赖都需要规避掉
		下层组件依赖上层组建：
			增加中间层解决，Event Bus、Provider 或 Router
		拓展：flutter的平台化
			Embedder（操作系统适配层）
			Engine（渲染引擎及 Dart VM 层）
			Framework（UI SDK 层）
		优点：明确的边界，向上提供的功能，向下依赖的能力也非常明确

	4. 打包环境优化
	Flutter App 工程：【安卓apk，ios是ipa】
		CI持续集成，自动化打包
		Travis CI[ https://travis-ci.com/ 需要收费，打扰了 ] + github
		1. 为项目引入 Travis
			#.travis.yml
			language: dart
			script:
			  - dart dart_sample.dart
		2. 搭建flutter环境
			...
		3. 针对不同平台android/iOS，使用matrix分拆构建任务
		4. 发布构建产物
			配置api_key为项目token【GitHub 项目就是github的token，配置在Travis->More options-Settings-Environment Variable】
		5. 通过before_deploy修改构建产物，达到ios也能正常输出ipa文件的包
	Module 工程：【安卓aar，iOS是Framework】
		安卓修改输出文件为aar，ios需要加工为pod文件
	
	5. 构建混合开发框架
		1>	基本设计原则
		混合开发架构
			按照业务和 UI 分解为 4 个维度，如下图：
			不具备UI属性								｜		具备UI属性
			原生UI控件（视频，地图控件）	｜		业务模块（flutter模块，原生我的模块）
			————————————————————————————
			不具备业务属性							｜		具备业务属性
			原生基础功能（网络，存储，		｜		原生基础业务功能（账号，支付）
			工具）											｜
			
			从上到下：
			独立业务模块（flutter模块，原生我的，原生详情）
			原生基础业务（账号，支付，升级）
			原生UI模块（公用控件，导航栏，轮播控件，富文本，标签）
			原生基础模块（网络，存储，工具）
			
			flutter的基础业务/模块 ---> 通过插件形式访问，原生的基础业务/模块
				列如：flutter基础业务模块的账号插件  -------> 依赖原生基础业务模块的账号功能
				
			原生依赖flutter模块，flutter模块又依赖原生工程。这种跨技术栈的依赖管理行为，主要是通过：
				将双方抽象为彼此对应技术栈的依赖，从而实现分层管理。
			即原生对flutter依赖抽象为依赖flultter模块的原生组件，flutter对原生的依赖抽象为依赖插件。
			
		flutter混合开发工作流
			需求 -> 方案 -> 开发 -> 发布 -> 线上运维
			
			核心在于持续交付
			测试阶段dart代码分析：flutter analyze
			发布阶段发布前检查：flutter package pub publish --dry-run
			
			flutter标准工作流命令：
			阶段 			子任务 							命令
			工程初始化 	App工程 			flutter create —template=app hello
								Dart包工程		flutter create —template=package hello
								插件工程 			flutter create —template=plugin hello
			开发/调试 	IDE Debugger 		N/A
								Flutter Inspector 	N/A
								性能调试 				N/A
			构建 			Debug构建 			flutter build apk —debug 
															flutter build ios —debug
								Release 构建 		flutter build apk —release
															flutter build ios —release
								Profile 构建			flutter build apk —profile 
															flutter build ios —profile
			测试 			Dart分析 				flutter analyze
								单元测试 				flutter test
								UI测试 					flutter test
			发布 			Package 发布		flutter packages pub publish
			集成原生工程 独立App打包		flutter build apk —release
															flutter build ios —release
								Pod/AAR 打包		flutter build apk —release
															flutter build ios —release
		2>	实践
		原生插件依赖管理原则
			原生代码宿主提供的底层基础能力的原生插件给flutter
		网络插件依赖管理实践
			类似iOS 的 AFNetworking 和 Alamofire、Android 的 OkHttp 和 Retrofit，提供插件给flutter
		网络插件接口封装
			- android 				FlutterPluginNetworkPlugin 实现MethodCallHandler，并在其onMethodCall中提供原生调用函数，并返回值
										注意：onMethodCall的返回值，必须在主线程返回
				build.gradle 		implementation "com.squareup.okhttp3:okhttp:4.2.0"
			- dart 					处理_channel调用原生代码			
		Flutter 模块工程依赖管理
			1. FlutterPluginNetworkPlugin使用【模块工程功能实现】
			2. 原生 Android 工程如何管理 Flutter 模块工程的依赖【构建产物应该如何封装】
		模块工程功能实现
			添加依赖
				flutter_plugin_network:
   				 	git:
   				  		 url: https://github.com/xxx/flutter_plugin_network.git
   			编写代码使用
   				FlutterPluginNetworkPlugin.doRequest(xxx);
		构建产物应该如何封装？
			pub pub依赖管理算法
			pubspec.yaml 设置包元数据，运行环境，外部依赖，内部配置
			.package 建立下载缓存与包名的映射
			pubspec.lock 记录当前状态下，实际安装的包具体来源和版本号
			.flutter-plugins 插件名与文件缓存地址的映射
		Android 构建产物应该如何封装？
			flutter插件生成aar文件，提供给原生依赖
			1. 为插件工程生成 aar
				cd android
				./gradlew flutter_plugin_network:assRel
			2. 原生添加插件/flutter依赖
				implementation(name: 'flutter-debug', ext: 'aar') 
				implementation(name: 'flutter_plugin_network-debug', ext: 'aar')
			3. 代码使用
				View FlutterView = Flutter.createView(this, getLifecycle(), "defaultRoute"); 
				setContentView(FlutterView);
			注意：如果插件中存在原生依赖（插件中依赖了OkHttp），是无法通过插件aar告知使用侧原生所需要的依赖，
						针对这种情况，使用侧可自行添加（okhttp）依赖 
		
			拓展：手动封装模块工程及构件产物过程，抽象成命令行脚本，添加在travis上，当期检测到代码变更之后，就会自动将flutter模块构件产物封装成原生工程期望的组件格式
				业界也有fat-aar(https://github.com/adwiv/android-fat-aar)，可将模块及其依赖打包成一个大aar
					问题1:	依赖冲突，原生工程与插件工程依赖同一个原生依赖组件（okhttp）会冲突，需要手动去掉原生工程的组件依赖
					问题2:	嵌套依赖，只处理 embedded 关键字指向的这层一级依赖，不处理下一层的依赖，对于依赖关系复杂的插件支持，需要手动处理
					问题3:	Gradle 版本限制，Gradle 插件版本有限制，导致后面不好维护
					问题4:	项目已经暂停维护，所以有未知问题
				总结：fat-aar不好，最好还是自行去遍历插件依赖，以持续交付的方式自动化生成 aar
			
七.	思考题
	
		