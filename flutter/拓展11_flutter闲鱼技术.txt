flutter闲鱼技术
1.  一个方案提升Flutter内存利用率
    问题：flutter使用外接纹理方式显示图片，纹理未缓存
    解决方案：自定义ImageCache解决
5.  flutter动态话方案
    页面动态组件框架，参考flutter analyzer解析dart 源码(dart sdk的package:analyzer)，拿到ASTNode
7.  路由管理代码长解决方案
    sourceGen注解方式动态生成映射文件
11. 录制回放技术 - 回溯用户事故现场
    用户点击开始录制，结束录制，上报事故即可，等待开发解决
    模拟触摸事件，统一拦截器实现，统一hook block
    1>  事件记录
        事件分发流程：
            _handlePointerDataPacket -> 手势碰撞测试 -> 手势竞争场，赢家胜利renderObject
            列如：有个点，包裹在A，C ，K，G中
                1> hitTest碰撞测试，遍历出视图路径：WidgetsFlutterBinding <— A <— C <— K <— G (其中GKCA是renderObject)
                2> entry.target.handleEvent手势竞技场比赛，顺序调用handleEvent函数 G->K->C->A->WidgetsFlutterBinding
        在手势识别器回调上包装回调方法，记录树上的节点相关属性和手势类型
    2>  事件回溯
12. UI2CODE智能生成Flutter代码
    设计给ui图形
    1.通过机器视觉技术，从视觉稿提取GUI元素
    2.通过深度学习技术，识别GUI元素类型
    3.通过递归神经网络技术，生成DSL
    4.通过语法树模板匹配，生成flutter代码
13. flutter动态化
    1> 数据采集
       参考Dart的 Analyzer库，通过parseCompilationUnit把dart源码解析成CompilationUnit为Root节点的AST树，只需要在此把其转化为json
       编译时，自动上传cdn
    2> widget创建
       app启动下载json，在使用位置解析出 ConstructorNode树，然后递归创建Widget
33. android flutter内存初探
    1>  Dart RunTime简介
    2>  Image内存初探
        flutter 使用的内存是Graphics内存（不是Java虚拟机内存，或Native内存）
    3>  FlutterView内存初探
        主要是native内存增加，解决方式：flutterView的复用（建立一个1像素的窗口，在窗口里完成FlutterView首帧渲染）
45. 万万没想到-Flutter这样外接纹理
    传统外接纹理，播放视频,数据流程：GPU->CPU->GPU
    优化后：
        共享GLContext, 数据流程：GPU->GPU
50. Flutter之禅 内存优化篇
    Xcode Instruments 排查IOKit较大，Dart Observatory看Dart Image较多，怀疑泄漏但测试未泄漏
    1. Flutter Engine的Task Runner加入了任务数量和C++ image对象的监控代码，发现有100+io操作
        测试发现是不可见widget还在不停的Resolve Image，优化后解决图片内存问题
    2. 页面切换
        截图过渡为预加载+缓存的策略
    3. FlutterViewController
        析构未释放，
51. 揭秘Flutter Hot Reload（基础篇）
    1. 点击运行
    ->  flutter_tools 的 HotRunner.restart(fullRestart: false)
    ->  _reloadSources(pause: pauseAfterRestart)
        1. 文件遍历，生成kernel files，重命名app.dill.incremental.dill，通过HTTP端口发送给DartVM
        2. 扫描.dill文件，通过RPC调用_reloadSources，进行资源加载
        3. 确认VM资源重载成功，将FlutterDevice UI线程重置，通过RPC接口，触发flutter widgets树重建、重绘

52. Flutter线上代码覆盖率解决方案——FlutterCodeX
    利用aspectd编译时代码插桩插件，运行时数据采集缓存，切后台数据压缩上传到oss，根据看板得到线上代码覆盖率数据