一. flutter 启动优化
	1. 分析方式:
		flutter run --trace-startup --profile 或者 edit configuation 上添加additional run args中添加 --profile后直接运行
		
		1> 若是想获取更多点位代码改动：
		1. flutter层
			path/to/flutter/packages/flutter_tools/lib/src/tracing.dart 里面的 traceInfoFile.writeAsStringSync(toPrettyJson(traceInfo));后添加
			
			// 新增 start_up_trace_events.json 生成
			 final String traceEventsFilePath = globals.fs.path.join(getBuildDirectory(), 'start_up_trace_events.json');
			 final File traceEventsFile = globals.fs.file(traceEventsFilePath);
			 final List<Map<String, dynamic>> events =
			 List<Map<String, dynamic>>.from((timeline['traceEvents'] as List<dynamic>).cast<Map<String, dynamic>>());
			 traceEventsFile.writeAsStringSync(toPrettyJson(events));
			 
			再重新生成flutter tools，生成文件可通过 chrome://tracing 查看
			
		2> 若是想支持 flutter cli 参数透传
		1. Android层
			path/to/engine/src/flutter/shell/platform/android/io/flutter/embedding/engine/FlutterEngine.java
			
			// FlutterEngine 的构造参数 dartVmArgs 中添加 --trace-startup 
			new FlutterEngine(mPlatform.getApplication().getApplicationContext(),
						FlutterLoader.getInstance(),new FlutterJNI(),new String[]{"--trace-startup"},true);
		2. ios层
			path/to/engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterDartProject.mm
			新增函数
			- (instancetype)initWithDartVmArgs:(nullable NSArray<NSString*>*)args {
				 return [self initWithPrecompiledDartBundle:nil dartVmArgs:args];
			}
			
			FlutterEngine.mm 时，作出如下设置：
			_dartProject = [[FlutterDartProject alloc] initWithPrecompiledDartBundle:dartBundle dartVmArgs:@[@"--trace-startup"]];
			_engine = [[FlutterEngine alloc] initWithName:@"io.flutter" project:_dartProject allowHeadlessExecution:YES];
	
	debug 参数：【debug模式支持的几种调试开关】
		1. debugProfilePaintsEnabled
		path/to/flutter/packages/flutter/lib/src/rendering/debug.dart
		在渲染 Paint 阶段，显示所有 Paint 时节点的遍历情况，可以根据这些信息查看是否有无用的节点 Paint
		
		2. debugProfileBuildsEnabled
		path/to/flutter/packages/flutter/lib/src/widgets/debug.dart
		在 Widget Build 阶段，显示所有 Widget 节点 Build 时的遍历情况，可以根据这些信息查看是否有无用的节点 Build
		
		3. debugProfileLayoutsEnabled
	
	自定义打点：
		列如想查看创建 IOSContext 的耗时：
		std::unique_ptr<IOSContext> IOSContext::Create(IOSRenderingAPI rendering_api) {
			 TRACE_EVENT0("flutter", "IOSContext::Create");
			  ......
			  FML_CHECK(false);
			  return nullptr;
		}
		
	2. 查看方式
		1. 查看具体帧
			performance -> 选中具体帧 -> 点击build函数 -> 查看cpu flame chart【右侧过滤选中hide core xxx library】
		2. 查看一段时间耗时情况
			cpu profiler -> record 录制一段时间，点击stop -> 查看这段时间的cpu flame chart
		
二. flutter 内存优化
	1. 分析方式
		flutter run -> 点击Observatory网址 -> 点击isolate xxx(main) 进入线程 -> 选择allocation profile
	
	2. 查看方式
		New generation: 新创建的对象，一般来说对象比较小，生命周期短，如local 变量。在这里GC活动频繁
		Old generation：从GC中存活下来的New generation将会转移到Old generation，它比新生代空间大，更适合大的对象和生命周期长的对象
		
		点击右上角“Auto-refresh on GC”，实时更新gc
		点击顶部的按钮 “ GC ” 来实现手动GC
		Reset Accumulator 清空数据