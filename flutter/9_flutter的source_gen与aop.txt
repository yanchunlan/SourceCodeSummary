一.  source_gen
    1. 添加依赖
        dependencies:
            analyzer: '>=1.4.0 <3.0.0'
            build: ^2.0.0
            build_config: '>=0.4.4 <2.0.0'
            source_gen: ^1.2.2
            source_helper: ^1.3.0
        builders:
          testBuilder:
            # 你的注解程序所处文件
            import: "package:test_meta_data/test_meta_data.dart"
            # 注解程序对应的构造方法
            builder_factories: ["TestMetadata"]
            # 生成的新文件后缀
            build_extensions: {".dart": [".g.part"]}
            auto_apply: root_package
            build_to: source

    2.  定义类
        class TestMetadata {
          const TestMetadata();
        }

        import 'package:analyzer/dart/element/element.dart';
        import 'package:build/build.dart';
        import 'package:source_gen/source_gen.dart';

        class TestGenerator extends GeneratorForAnnotation<TestMetadata> {
          @override
          generateForAnnotatedElement(
              Element element, ConstantReader annotation, BuildStep buildStep) {
            /// 生成以下代码
            return "class Tessss{}";
          }
        }
    3. 引入这个 package，并添加注解，执行命令：
        flutter packages pub run build_runner build
        自动生成 TestModel.g.dart 文件

    原理阐释：
        flutter packages pub run build_runner build
        ->

二.  aop


三.  总结

