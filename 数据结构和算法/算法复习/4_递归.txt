一.	前言
	递归和回溯的关系密不可分：
		递归的基本性质就是函数调用，在处理问题的时候，递归往往是把一个大规模的问题不断地变小然后进行推导的过程。
		回溯则是利用递归的性质，从问题的起始点出发，不断地进行尝试，回头一步甚至多步再做选择，直到最终抵达终点的过程
二.	递归
	1.	思想
		递归算法是一种调用自身函数的算法（二叉树的许多性质在定义上就满足递归）
	2.	举例
		abc,把a全部搬到c,汉诺塔问题
	3.	思路
		n 		A- c
		n-1 	a - c ,其余盘子在 b
		1		a - c
		
		void hano(char A, char B, char C, int n) {
		    if (n > 0) {
		        hano(A, C, B, n - 1);
		        move(A, C);
		        hano(B, A, C, n - 1);
		  }
		}
	4.	案列1
		LeetCode 第 91 题，解码的方法。
		一条包含字母 A-Z 的消息通过以下方式进行了编码：
		'A' -> 1，'B' -> 2  …  'Z' -> 26
		给定一个只包含数字的非空字符串，请计算解码方法的总数
	5.	思路
		1>	就例题中的第二个例子，给定编码后的消息是字符串“226”，如果对其中“22”的解码有 m 种可能，那么，加多一个“6”在最后，相当于在最终解密出来的字符串里多了一个“F”字符而已，总体的解码还是只有 m 种。
		2>	对于“6”而言，如果它的前面是”1”或者“2”，那么它就有可能是“16”，“26”，所以还可以再往前看一个字符，发现它是“26”。而前面的解码组合是 k 个，那么在这 k 个解出的编码里，添加一个“Z”，所以总的解码个数就是 m+k
	6.	代码
		int numDecodings(String s) {
		    if (s.charAt(0) == '0') return 0;
		    char[] chars = s.toCharArray();
		    return decode(chars, chars.length - 1);
		}
		// 字符串转换成字符数组，利用递归函数 decode，从最后一个字符向前递归
		int decode(char[] chars, int index) {
		    // 处理到了第一个字符,只能有一种解码方法，返回 1
		    if (index <= 0) return 1;
		    int count = 0;
		    char curr = chars[index];
		    char prev = chars[index - 1];
		    // 当前字符比 “0” 大，则直接利用它之前的字符串所求得的结果     
		    if (curr > '0') {
		        count = decode(chars, index - 1);
		    }
		    // 由前一个字符和当前字符所构成的数字，值必须要在 1 到 26 之间，否则无法进行解码 
		    if (prev == '1' || (prev == '2' && curr <= '6')) {
		        count += decode(chars, index - 2);
		    }  
		    return count;
		}
	7.	递归函数解题模板
		1.	判断当前情况是否非法，如果非法就立即返回，这一步也被称为完整性检查（Sanity Check）。例如，看看当前处理的情况是否越界，是否出现了不满足条件的情况。通常，这一部分代码都是写在最前面的。
		2.	判断是否满足结束递归的条件。在这一步当中，处理的基本上都是一些推导过程当中所定义的初始情况。
		3.	将问题的规模缩小，递归调用。在归并排序和快速排序中，我们将问题的规模缩小了一半，而在汉诺塔和解码的例子中，我们将问题的规模缩小了一个。
		4.	利用在小规模问题中的答案，结合当前的数据进行整合，得出最终的答案。
		
		function fn(n) {
		    // 第一步：判断输入或者状态是否非法？
		    if (input/state is invalid) {
		        return;
		    }

		    // 第二步：判读递归是否应当结束?
		    if (match condition) {
		        return some value;
		    }

		    // 第三步：缩小问题规模
		    result1 = fn(n1)
		    result2 = fn(n2)
		    ...

		    // 第四步: 整合结果
		    return combine(result1, result2)
		}
	8.	案列分析2
		LeetCode 第 247 题：找到所有长度为 n 的中心对称数
		输入:  n = 2 		->			输出: ["11","69","88","96"]
	9.	思路
		当 n=0 的时候，应该输出空字符串：“ ”。
		当 n=1 的时候，也就是长度为 1 的中心对称数有：0，1，8。
		当 n=2 的时候，长度为 2 的中心对称数有：11， 69，88，96。注意：00 并不是一个合法的结果。
		当 n=3 的时候，只需要在长度为 1 的合法中心对称数的基础上，不断地在两边添加 11，69，88，96 就可以了。
		[101, 609, 808, 906,     111, 619, 818, 916,     181, 689, 888, 986]
		随着 n 不断地增长，我们只需要在长度为 n-2 的中心对称数两边添加 11，69，88，96 即可
		
		List<String> helper(int n, int m) {
		    // 第一步：判断输入或者状态是否非法？
		    if (n < 0 || m < 0 || n > m) {
		        throw new IllegalArgumentException("invalid input");
		  	}

		    // 第二步：判读递归是否应当结束?
		    if (n == 0) return new ArrayList<String>(Arrays.asList(""));
		    if (n == 1) return new ArrayList<String>(Arrays.asList("0", "1", "8"));
		  
		    // 第三步：缩小问题规模
		    List<String> list = helper(n - 2, m); 

		    // 第四步: 整合结果
		    List<String> res = new ArrayList<String>();
		  
		    for (int i = 0; i < list.size(); i++) {
		        String s = list.get(i);
		    
		        if (n != m) res.add("0" + s + "0");
		    
		        res.add("1" + s + "1");
		        res.add("6" + s + "9");
		        res.add("8" + s + "8");
		        res.add("9" + s + "6");
		    }
		    return res;
		}
	10.	分析
		非递归算法时间复杂度，类似冒泡/插入每次都是对比交换O(1),所以最终就是每层长度相乘
		递归算法：
			迭代
			公式
		1>	迭代法
			汉诺塔问题
			假设这个递归函数的运行时间是 T(n)。
			1. if 语句（一般取 if 块或 else 块之间最大的时间复杂度）中，比较和判断 n 的大小，CPU 的执行时间为 1 个单位。
			2. 两次调用递归函数，每次都使问题的规模减少 1 个，得到两倍的 T(n-1)。打印输出的语句，CPU 的执行时间也为 1 个单位。因此得出：T(n) = 1 + 2×T(n - 1) + 1。
				此处 if 语句和打印输出语句的执行时间与问题规模 n 无关，因此它们的算法时间复杂度可以记为 O(1)，表达式变为：T(n) = 2×T(n - 1) + O(1)。
				当 n=0 的时候，T(0) = 1，因为当没有盘子的时候，if 语句也要进行一次比较，判断 n 是否大于 0。
			3. 用迭代法将 T(n) 进行展开。
				T(n - 1) = 2×T(n - 2) + 1，以此类推，不断地代入到 T(n) 的表达式当中，得到如下关系：
	 			T(n) = 2× (2×T(n - 2) + 1) + 1 = 22×T(n - 2) + (2 + 1)
				T(n) = 2×(2× (2×T(n - 3) + 1) + 1) + 1 = 23×T(n - 3) + (4 + 2 + 1)
				T(n) = 2×(2×(2×(2×T(n - 4) + 1) + 1) + 1) + 1 = 24×T(n - 4) + (8 + 4 + 2 + 1)
				…
				T(n) = 2k×T(n - k) + (2k - 1)
		 		其中，1 + 2 + 4 + 8 + … 是一个等比数列，由求和公式得到 2k - 1。当 k 等于 n 的时候，T(n) = 2n×T(0) + (2n - 1)，由于 T(0) 等于 1，所以最终 T(n) = 2×2n - 1。
				对 T(n) 求 O 的值得到：O(n) = O(T(n)) = O(2×2n - 1) ，忽略掉常量和系数，O(n) = O(2n)。
		 		所以，整个算法的时间复杂度就是 O(2n)。
		 		而很难通过迭代法推导出比较复杂的时间复杂度的时候，可以借用公式法
		2>	公式法
			T(n) = a×T(n/b) + f(n)。
			整体时间复杂度的三种情况和相应公式如下：
				1.	当递归部分的执行时间 nlog(b)a 大于 f(n) 的时候，最终的时间复杂度就是 O(n^logba)。
				2.	当递归部分的执行时间 nlog(b)a 小于 f(n) 的时候，最终的时间复杂度就是 f(n)。
				3.	当递归部分的执行时间 nlog(b)a 等于 f(n) 的时候，最终的时间复杂度就是 O(n^logba)logn。
	11.	举例1
		分析归并排序的时间复杂度。
			T(n) = 2T(n/2) + n
			a = 2，b = 2，f(n) = n
			logba = 1，n1 = n
		符合第三种情况，最终的时间复杂度就是 O(nlogn)
	12.	举例 2
		分析下面函数的时间复杂度。
		int recursiveFn(int n) {
		    if (n == 0) {
		        return 0;
		    }
		    return recursiveFn(n / 4) + recursiveFn(n / 4);
		}
		得出时间执行函数：T(n) =  2×T(n/4) + 1，a = 2，b = 4，f(n) = 1。
		代入公式得到：n^log42 = n0.5，当 n>1 的时候，n0.5>1，因此，时间复杂度就是  O(n0.5)。
	13.	举例 3
		已知时间执行函数如下，分析时间复杂度。
		T(n) = 3×T(n/2) + n2
		a = 3，b = 2，f(n) = n2
		最复杂的操作发生在递归完成之后，符合第二种情况。 
		代入公式得到：n^log23 = n1.48<n2，最后递归的时间复杂度是 O(n2)。
	
三.	回溯（试探算法）
	1.	特点
		回溯算法的特点在于，当出现非法的情况时，算法可以回退到之前的情景，可以是返回一步，有时候甚至可以
		返回多步，然后再去尝试别的路径和办法。这也就意味着，想要采用回溯算法，就必须保证，每次都有多种尝试的可能
	2.	解题模板
		1>	步骤
			1.	判断当前情况是否非法，如果非法就立即返回；
			2.	当前情况是否已经满足递归结束条件，如果是就将当前结果保存起来并返回；
			3.	当前情况下，遍历所有可能出现的情况并进行下一步的尝试；
			4.	递归完毕后，立即回溯，回溯的方法就是取消前一步进行的尝试。
		2>	代码
			function fn(n) {
			    // 第一步：判断输入或者状态是否非法？
			    if (input/state is invalid) {
			        return;
			  	}
			    // 第二步：判读递归是否应当结束?
			    if (match condition) {
			        return some value;
			 	}
			    // 遍历所有可能出现的情况
			    for (all possible cases) {
			  		// 第三步: 尝试下一步的可能性
			        solution.push(case)
			        // 递归
			        result = fn(m)
			        // 第四步：回溯到上一步
			        solution.pop(case)
			    } 
			}
	3.	案列1
		LeetCode 第 39 题：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取
	4.	思路
		1>	暴力法
			罗列出所有的子集组合，然后逐个判断它们的总和是否为给定的目标值。解法非常慢
		2>	回溯法
			从一个空的集合开始，小心翼翼地往里面添加元素。
			每次添加，检查一下当前的总和是否等于给定的目标。
			如果总和已经超出了目标，说明没有必要再尝试其他的元素了，返回并尝试其他的元素；
			如果总和等于目标，就把当前的组合添加到结果当中，表明我们找到了一种满足要求的组合，同时返回，并试图寻找其他的集合
	5.	实现
		int[][] combinationSum(int[] candidates, int target) {
		    int[][] results;
		    backtracking(candidates, target, 0, [], results - 换另外一种颜色高亮);
		    return results;
		}
		void backtracking = (int[] candidates, int target, int start, int[] solution, int[][] results) => {
		    if (target < 0) {
		        return;
		  }
		    if (target === 0) {
		        results.push(solution);
		        return;
		  }
		    for (int i = start; i < candidates.length; i++) {
		        solution.push(candidates[i]);
		        backtracking(candidates, target - candidates[i], i, solution, results);
		        solution.pop();
		    }
		}
		在主函数里：
			定义一个 results 数组用来保存最终的结果；
			调用函数 backtracking，并将初始的情况以及 results 传递进去，这里的初始情况就是从第一个元素开始尝试，而且初始的子集为空。
		在 backtracking 函数里：
			检查当前的元素总和是否已经超出了目标给定的值，每添加进一个新的元素时，就将它从目标总和中减去；
			如果总和已经超出了目标给定值，就立即返回，去尝试其他的数值；
			如果总和刚好等于目标值，就把当前的子集添加到结果中。
		在循环体内：
			每次添加了一个新的元素，立即递归调用 backtracking，看是否找到了合适的子集
			递归完毕后，要把上次尝试的元素从子集里删除，这是最重要的。
	6.	案列2
		LeetCode 第 51 题， 在一个 N×N 的国际象棋棋盘上放置 N 个皇后，每行一个并使她们不能互相攻击。给定一个整数 N，返回 N 皇后不同的的解决方案的数量。
	7.	思路
		判断当前各个皇后的摆放是否合法。
	8.	代码
		1-row,检查是否在col行，及对角线上
		boolean check(int row, int col, int[] columns) {
		    for (int r = 0; r < row; r++) {
		        if (columns[r] == col || row - r == Math.abs(columns[r] - col)) {
		            return false;
		        }
		    }
		    return true;
		}
		回溯操作：
		int count;
		int totalNQueens(int n) {
		    count = 0;
		    backtracking(n, 0, new int[n]);
		    return count;
		}
		void backtracking(int n, int row, int[] columns) {
		    // 是否在所有n行里都摆放好了皇后？
		    if (row == n) {
		        count++; // 找到了新的摆放方法
		        return;
		  }

		    // 尝试着将皇后放置在当前行中的每一列   
		    for (int col = 0; col < n; col++) {
		        columns[row] = col;

		        // 检查是否合法，如果合法就继续到下一行
		        if (check(row, col, columns)) {
		            backtracking(n, row + 1, columns);
		        }

		        // 如果不合法，就不要把皇后放在这列中（回溯）
		        columns[row] = -1;
		    }
		}
	9.	复杂度
		每次需要遍历列，O(n),每次需要检查是否冲突O（n2）,递归解决放置一个就减少一个T(n-1)
		总结T(n) = n×T(n - 1) + O(n2)。
		利用迭代法将 T(n) 展开得到：
 		T(n) = n×((n - 1)×T(n - 2) +  (n - 1)2 + n2
		…
		T(n) = n×(n - 1)×(n - 2)× … ×1 + 1 + 22 + 32 + … (n - 1)2 + n2
		前面一部分是阶乘，后面一部分是平方求和，根据公式最后得到： 
		T(n) = n! + n(n+1)(2n+1)/6
		O(T(n)) = n! + O(n3)	 
		由于 n!>n3，因此，它的上界就是 n!，即：O(T(n)) = n!
四.	总结
	二叉树的定义和遍历就利用到了递归的性质；归并排序、快速排序的时候也运用了递归
	动态规划也是递归的一种优化，二分搜索也是递归
	
	熟系递归必须熟系 等差数列、等比数列等求和公式