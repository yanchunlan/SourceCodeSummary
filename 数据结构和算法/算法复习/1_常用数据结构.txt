一.	内容
	数组，字符串
	链表
	栈
	队列
	双端队列
	树
	1.	数组，字符串
		查询O(1),添加/删除/查询某个元素是否存在O(n)
		实例：
			1>	翻转字符串“algorithm”
				2个指针，一个前，一个后，遍历向中间靠拢，相互交换字符
				字符串无法被修改，需要转换为字符数组，直接修改字符数组
			2>	给定两个字符串 s 和 t，编写一个函数来判断 t 是否是 s 的字母异位词
				a)	假设都是小写字符，直接构造26大小数组，统计字母出现次数，对比是否相等
				b)	26大小数组，出现s字符+1,出现t字符-1，如果后面都是0，就相等
		总结：
			归并
			转char数组
			利用现有支持string.chat/recorve/等
	2.	链表
		添加/删除O(1),查询O(n)
		1>	利用快慢指针（3个指针，速度一快一慢，依靠速度的差值让我们找到某点，差值就决定找的点的位置（2找中点，n为找n点））
			链表翻转，寻找倒数第k个元素，寻找链表中间位置元素，判断链表是否有环
		2>	构造虚假链表头（如果没创建虚拟头就要判断头指针是否为空，用虚拟头就不需要判断了）
			一般用于返回新的链表题目中，最好是画出相互关系，有利于分析问题
			给定两个排好序的链表，要求将它们整合在一起并排好序；
			将一个链表中的奇数和偶数按照原定的顺序分开后重新组合成一个新的链表，链表的头一半是奇数，后一半是偶数
		实例：
			1>	给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。k 是一个正整数，它的值小于或等于链表的长度。
			如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序
				给定这个链表：1->2->3->4->5
				当 k=2 时，应当返回：2->1->4->3->5
				当 k=3 时，应当返回：3->2->1->4->5
			思路：
				将 curr 指向的下一节点保存到 next 指针；
				curr 指向 prev，一起前进一步；
				重复之前步骤，直到 k 个元素翻转完毕；
				当完成了局部的翻转后，prev 就是最终的新的链表头，curr 指向了下一个要被处理的局部，而原来的头指针 head 成为了链表的尾巴。
		总结：
			（迭代）3指针解法，3个指针节点curr,next,pre，遍历分别找到并执行修改指向等。（链表翻转）
			（迭代）2指针解法，快慢指针。（查找某个数字）
			（迭代）虚拟头，定义一个头节点，慢慢取出插入。（链表翻转）
			（迭代）就地反转，3指针解法，个指针节点curr,next,pre，遍历分别把end的节点指针指向头部（链表翻转）
			递归
	3.	栈
		单链表即可实现，O(1)
		后进先出，栈顶操作元素压入弹出，一般用于最近一次操作，且操作完成后需要更前一步的操作
		实例：
			1>	给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效
				给定一个栈，压入左括号，遇到右括号，弹出，至栈中无左括号，则true
			2>	给定一个数组 T 代表了未来几天里每天的温度值，要求返回一个新的数组 D，D 中的每个元素表示需要经过多少天才能等来温度的升高。
				给定 T：[23, 25, 21, 19, 22, 26, 23]
				返回 D:  [  1,   4,   2,   1,   1,   0,   0]
				
				思路：
					1.	遍历每个元素，向后寻找，计算复杂度O(n2)
						缺点：存在重复的寻找
					2.	堆栈寻找
						堆栈压入的是下标，对比后面的温度，如果高于压入的，就弹出压入的，并且相减，
						1.	对第一个温度 23 度，堆栈为空，把它的下标压入堆栈；
						2.	下一个温度 24 度，高于 23 度高，因此 23 度温度升高只需 1 天时间，把 23 度下标从堆栈里弹出，把 24 度下标压入；
						3.	同样，从 24 度只需要 1 天时间升高到 25 度；
						4.	21 度低于 25 度，直接把 21 度下标压入堆栈；
						5.	19 度低于 21 度，压入堆栈；
						6.	22 度高于 19 度，从 19 度升温只需 1 天，从 21 度升温需要 2 天；
						7.	由于堆栈里保存的是下标，能很快计算天数；
						8.	22 度低于 25 度，意味着尚未找到 25 度之后的升温，直接把 22 度下标压入堆栈顶端；
						9.	后面的温度与此同理。
					只需要遍历一次，所以它的复杂度O(n)
		利用堆栈，还可以解决如下问题：
			1.	求解算术表达式的结果（LeetCode 224、227、772、770)
			2.	求解直方图里最大的矩形区域（LeetCode 84）
	4.	队列
		先进先出，队尾查看/添加数据，队头查看/删除数据
		可用双链表实现队列，运用队列比较多的有：广度优先搜索
		1>	双端队列
			允许在队头尾查看/添加/删除数据，双链表实现，常用于：实现一个长度动态变化的窗口或连续区间
		
		实例：给定一个数组以及一个窗口的长度 k，现在移动这个窗口，要求打印出一个数组，数组里的每个元素是当前窗口当中最大的那个数。
			输入：nums = [1, 3, -1, -3, 5, 3, 6, 7]，k = 3
			输出：[3, 3, 5, 5, 6, 7]
			
			思路：
				1.	简单的移动，扫描，对比获取最大值，算法复杂度O(n)
				2.	双端队列来保存当前窗口中最大那个数在数组里的下标，双端队列新的头就是当前窗口中最大的那个数。通过该下标，可以很
				快地知道新的窗口是否仍包含原来那个最大的数。如果不再包含，我们就把旧的数从双端队列的头删除
					因为双端队列能让上面的这两种操作都能在 O(1) 的时间里完成，所以整个算法的复杂度能控制在 O(n)
				
						初始化窗口 k=3，包含 1，3，-1，把 1 的下标压入双端队列的尾部；
						把 3 和双端队列的队尾的数据逐个比较，3 >1，把 1 的下标弹出，把 3 的下标压入队尾；
						-1<3，-1 压入双端队列队尾保留到下一窗口进行比较；
						3 为当前窗口的最大值；
						窗口移动，-3 与队尾数据逐个比较，-3<-1，-3 压入双端队列队尾保留；
						3 为当前窗口的最大值；
						窗口继续移动，5>-3，-3 从双端队列队尾弹出；
						5>-1，-1 从队尾弹出；
						3 超出当前窗口，从队列头部弹出；
						5 压入队列头部，成为当前窗口最大值；
						继续移动窗口，操作与上述同理。
	5.	树
		主要是递归，面试主要问：	树的遍历和序列化
		1.	树的形状
			常见：	普通二叉树、平衡二叉树、完全二叉树、二叉搜索树、四叉树（Quadtree）、多叉树（N-ary Tree）
			特殊：	红黑树（Red-Black Tree）、自平衡二叉搜索树（AVL Tree）
			
				满二叉树：	除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树
				完全二叉树：	一棵二叉树至多只有最下面的一层上的结点的度数可以小于2，并且最下层上的结点
								都集中在该层最左边的若干位置上，则此二叉树成为完全二叉树
				平衡二叉树：	它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树
				二叉搜索树：	查找/排序, 它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均
								小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树
				红黑树：		平衡二叉搜索树 
				哈弗曼树：		给定n个权值作为n个叶子结点，构造一棵二叉树，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近
		2.	前序遍历
			根->左->右->递归
			应用场景：	树的搜索及创建新树
		3.	中序遍历
			左->根->右->递归
			应用场景：	二叉搜索树（左<根<右），使用中序遍历就是顺序进行的
		4.	后序遍历
			左->右->根
			应用场景：	分析左右子树信息，从底部往上进行，类似于从外往内进行
		实例：	LeetCode 第 230 题，给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素
			思路：
				二叉搜索树，只需要中序遍历一遍，直接得出结果
			拓展：
				求解第k大元素，只需要反向中序遍历，即得从大到小的数据，
		
		问题：
			为什么hashMap使用红黑树没有使用其他？
			思考到树有搜索树，平衡树，搜索树容易线性，平衡树太严格要求平衡导致自旋次数较多，所以使用红黑树，搜索快插入易平衡
			